<?xml version="1.0" encoding="utf-8"?>
<chapter version="5.0" xml:id="con.concurrency" xml:lang="en" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Concurrency</title>

  <sect1 xml:id="con.threads">
    <title>Threads</title>

    <para>A program typically runs along a single thread of execution: each statement is executed sequentially and predictably. Programs that use only this thread—termed the <firstterm>main thread</firstterm>—are <firstterm>single-threaded</firstterm>; by contrast, a <firstterm>multithreaded</firstterm> program has multiple threads of execution, each of which is associated with a block of code. The operating system rapidly switches between these threads—letting each run for a fraction of a second—creating the appearance<footnote><para>Sadly, Ruby does not actually execute threads concurrently even on multi-core CPUs because some extension libraries are not thread-safe: only one thread runs at any given time.</para></footnote> of parallel execution.</para>

    <para>Threads are represented as instances of the <literal>Thread</literal> class. <function>Thread.current</function> and <function>Thread.main</function> return <literal>Thread</literal> objects corresponding to the current and main threads, respectively.</para>

    <sect2 xml:id="con.thread-init">
      <title>Initialisation</title>

      <para>Threads are created by passing a block to <function>Thread.new</function> which creates a new thread to run the block then returns immediately. Any arguments given are passed to the block as block paramaters. <function>Thread.start</function>, and its alias <function>Thread.fork</function>, behave identically except if their receiver is a subclass of <literal>Thread</literal> its <literal>initialize</literal> method is not called.</para>
    </sect2>

    <sect2 xml:id="con.thread-termination">
      <title>Termination</title>
 
      <para>A given thread can be terminated with <function>Thread#kill</function>—which is aliased to <function>Thread#exit</function> and <function>Thread#terminate</function>. Similarly, <function>Thread.kill(<replaceable>thread</replaceable>)</function>, where <replaceable>thread</replaceable> is a <literal>Thread</literal> object, terminates the given thread. <function>Thread#kill!</function>—which is aliased to <function>Thread#exit!</function> and <function>Thread#terminate!</function>—behaves like <function>Thread#kill</function> except it bypasses any <literal>ensure</literal> clauses in the receiver. <function>Thread.exit</function> terminates the current thread, which it returns if already marked to be killed. Ruby exits when its main thread is terminated.</para>
    </sect2>

    <sect2 xml:id="con.thread-status">
      <title>Status</title>
      
      <para>A thread is always in one of five possible states—<emphasis>runnable</emphasis>, <emphasis>sleeping</emphasis>, <emphasis>aborting</emphasis>, <emphasis>terminated normally</emphasis>, or <emphasis>terminated exceptionally</emphasis>—which may be queried as shown below.</para>

      <informaltable>
	<thead>
	  <tr>
	    <th>State</th>
	    <th><function>Thread#status</function></th>
	    <th><function>Thread#alive?</function></th>
	    <th><function>Thread#stop?</function></th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td>Runnable</td>
	    <td><literal>"run"</literal></td>
	    <td><literal>true</literal></td>
	    <td><literal>false</literal></td>
	  </tr>
	  <tr>
	    <td>Sleeping</td>
	    <td><literal>"sleep"</literal></td>
	    <td><literal>true</literal></td>
	    <td><literal>true</literal></td>
	  </tr>
	  <tr>
	    <td>Aborting</td>
	    <td><literal>"aborting"</literal></td>
	    <td><literal>false</literal></td>
	    <td><literal>true</literal></td>
	  </tr>
	  <tr>
	    <td>Terminated normally</td>
	    <td><literal>false</literal></td>
	    <td><literal>false</literal></td>
	    <td><literal>true</literal></td>
	  </tr>
	  <tr>
	    <td>Terminated exceptionally</td>
	    <td><literal>nil</literal></td>
	    <td><literal>false</literal></td>
	    <td><literal>true</literal></td>
	  </tr>
	</tbody>
      </informaltable>

      <para>When a thread is created it is <emphasis>runnable</emphasis>. It enters the <emphasis>sleeping</emphasis> state while <function>Kernel.sleep</function><footnote><para>If <function>Kernel.sleep</function> is called without an argument, it blocks until the thread is awoken or terminated.</para></footnote> or an <literal>IO</literal> method is blocking, after which it returns to <emphasis>runnable</emphasis>. A thread that calls <function>Thread.stop</function> also switches to <emphasis>sleeping</emphasis>, where it remains until awoken, then schedules execution of another thread. A <emphasis>sleeping</emphasis> thread may be made <emphasis>runnable</emphasis> with <function>Thread#wakeup</function> or <function>Thread#run</function>, unless it is sleeping due to blocking I/O. <function>Thread#run</function> then invokes the thread scheduler, possibly causing the thread to begin running; <function>Thread#wakeup</function> does not.</para> 

      <para>A thread that raises an exception, which it does not subsequently rescue, enters the <emphasis>terminated exceptionally</emphasis> state. <remark>Link to Thread#raise</remark> Otherwise, after a thread has executed its final statement its status is <replaceable>terminated normally</replaceable>. When a thread is terminated explicitly, its status becomes <emphasis>aborting</emphasis>. Unless it was terminated with <function>Thread#kill!</function>—or an alias thereof—it then executes its <literal>ensure</literal> clause, the contents of which may cause the thread to change state again. Finally, when the thread actually terminates, its state will be <emphasis>terminated normally</emphasis>.</para>
    </sect2>

    <sect2 xml:id="con.thread-variables">
      <title>Variables</title>

      <para>Threads are created with blocks, so standard scoping rules apply: they may access any variable in the scope of this block, and local variables that they define are not shared with other threads. An implication is that if a thread accesses a variable defined in its parent scope, it will share this variable with all other threads created in the same scope. We have already seen how this behaviour can be avoided by providing arguments to <function>Thread.new</function> to create block-local variables.</para>

      <para>Some of the predefined global variables are <firstterm>thread-local</firstterm>: each thread has its own, private copy. <remark>Table of thread-local globals?</remark> Only Ruby can create thread-local global variables, but any thread may create <firstterm>thread keys</firstterm> <biblioref units="pages" begin="432" end="435" linkend="bib.black09"/>: thread-local variables, accessible to other threads via a <literal>Hash</literal>-like interface. <function>Thread#[<replaceable>key</replaceable>]=<replaceable>value</replaceable></function> creates a thread key named <replaceable>key</replaceable>—which must be a <literal>String</literal> or <literal>Symbol</literal>—to <replaceable>value</replaceable>. <function>Thread#[<replaceable>key</replaceable>]</function> returns the value associated with <replaceable>key</replaceable>, or <literal>nil</literal> if there is none. The <function>Thread#key?(<replaceable>key</replaceable>)</function> predicate returns <literal>true</literal> if the receiver has defined a thread key named <replaceable>key</replaceable>; <literal>false</literal>, otherwise. The names of all keys defined by a given thread are returned by <function>Thread#keys</function> as an <literal>Array</literal> of <literal>Symbol</literal>s.</para>     
    </sect2>

    <sect2 xml:id="con.thread-join">
      <title>Joining</title>

      <para>Ruby runs until the main thread terminates, even if additional threads were created and are still running. To wait for a specific thread to terminate, blocking until it does so, <function>Thread#value</function> may be used. It returns the value of the last statement executed by the thread. <function>Thread#join(<replaceable>seconds</replaceable>)</function> also blocks until its receiver terminates, but if more than <replaceable>seconds</replaceable> seconds elapse it gives up and returns <literal>nil</literal>; on success it returns the receiver. If <replaceable>seconds</replaceable> is omitted, there is no time limit.</para>
    </sect2>

    <sect2 xml:id="con.thread-exceptions">
      <title>Exceptions</title>

      <para>When an unhandled exception occurs in the main thread, Ruby prints the backtrace then exits. When another thread raises, but does not handle, an exception, its behaviour depends on an <emphasis>abort on exception</emphasis> flag.</para>

      <para>If <emphasis>abort on exception</emphasis> is <literal>false</literal>, as it is by default, an unhandled exception causes a thread to terminate silently; when waited on—with either <function>Thread#join</function> or <function>Thread#value</function>—the exception is raised in the calling thread. If <emphasis>abort on exception</emphasis> is <literal>true</literal>, all threads behave like the main thread when encountering unhandled exceptions: they print its backtrace then cause the interpreter to exit.</para>

      <para>The flag may be set globally with <function>Thread.abort_on_exception=</function> or per-thread with <function>Thread#abort_on_exception=</function>. These values may be retrieved with <function>Thread.abort_on_exception</function> and <function>Thread#abort_on_exception</function>, respectively. If <literal>$DEBUG</literal> is <literal>true</literal>—as it is when the interpreter is given the <option>-d</option> flag—threads behave as if <function>Thread.abort_on_exception</function> is also <literal>true</literal>.</para>
    </sect2>

    <sect2 xml:id="con.thread-scheduling">
      <title>Scheduling</title>

      <para>Threads initially have a priority of zero, with a higher priority implying more favourable scheduling. <function>Thread#priority</function> returns the receiver’s priority as an <literal>Integer</literal>; <function>Thread#priority=(<replaceable>priority</replaceable>)</function> sets the receiver’s priority to <replaceable>priority</replaceable>. However, priorities are merely hints to the thread scheduler: they may be entirely disregarded, as they are under Linux for non-privileged users.</para>

      <para>There are, broadly, two approaches for allocating CPU cycles to threads: cooperative multitasking and preemptive multitasking. In the former, a context switch occurs when a thread explicitly yields control back to the CPU, or performs a blocking operation such as I/O. In the latter, each thread is run only for a certain amount of time before being interrupted so that another thread may run instead. Under a cooperative approach, a thread which neither yields nor performs blocking operations may <firstterm>starve</firstterm> the process’s other threads from executing, monopolising the CPU. As a workaround, compute-bound threads may use <function>Thread.pass</function> to explicitly yield to the thread scheduler.</para>
    </sect2>

    <sect2 xml:id="con.thread-groups">
      <title>Groups</title>

      <para>Ruby maintains an <literal>Array</literal> named <literal>Thread.list</literal> of all runnable or sleeping threads. It will always contain at least one entry: the main thread. When a thread terminates, it is removed from this list.</para>

      <para>A thread is also a member of exactly one <firstterm>thread group</firstterm>, which provides finer-grained control over subsets of threads. The main thread is a member of the <literal>ThreadGroup::Default</literal> group, and new threads are members of their parent’s group.</para>

      <para><function>Thread#group</function> returns the <literal>ThreadGroup</literal> containing the receiver. The members of a group are returned as an <literal>Array</literal> by <function>ThreadGroup#list</function>. A thread may be added to a different group with <function>ThreadGroup#add</function>, which first removes the thread from its original group. A group may be <firstterm>enclosed</firstterm>, preventing other threads from being explicitly added; however, threads created by existing members of the group will still be made members. <function>ThreadGroup#enclose</function> encloses its receiver. The <function>ThreadGroup#enclosed?</function> predicate returns <literal>true</literal> if its receiver is enclosed; <literal>false</literal> otherwise. Lastly, a new group may be created with <function>ThreadGroup.new</function>.</para>
    </sect2>

    <sect2 xml:id="con.thread-synchronisation">
      <title>Synchronisation</title>
      
      <para>When multiple threads need to access a shared, modifiable resource, they must ensure consistency such that no thread sees it an inconsistent state. Otherwise, a <firstterm>race condition</firstterm>—when a result is dependent on the order in which the threads finish—may occur, making the result non-deterministic. The solution is <firstterm>synchronisation</firstterm>.</para>

      <para>A popular example is the <emphasis>"too much milk"</emphasis> problem:</para>

      <informaltable>
	<thead>
	  <tr>
	    <th>Time</th>
	    <th>You</th>
	    <th>Roommate</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td>5:00</td>
	    <td>Arrive home</td>
	    <td>&#160;</td>
	  </tr>
	  <tr>
	    <td>5:05</td>
	    <td>Discover you’ve ran out of milk</td>
	    <td>&#160;</td>
	  </tr>
	  <tr>
	    <td>5:10</td>
	    <td>Leave for grocery shop</td>
	    <td>&#160;</td>
	  </tr>
	  <tr>
	    <td>5:15</td>
	    <td>&#160;</td>
	    <td>Arrive home</td>
	  </tr>
	  <tr>
	    <td>5:20</td>
	    <td>Arrive at shop</td>
	    <td>Discover you’ve ran out of milk</td>
	  </tr>
	  <tr>
	    <td>5:25</td>
	    <td>Buy milk</td>
	    <td>Leave for grocery shop</td>
	  </tr>
	  <tr>
	    <td>5:30</td>
	    <td>Arrive home, put milk in fridge</td>
	    <td>&#160;</td>
	  </tr>
	  <tr>
	    <td>5:35</td>
	    <td>&#160;</td>
	    <td>Arrive at shop</td>
	  </tr>
	  <tr>
	    <td>5:40</td>
	    <td>&#160;</td>
	    <td>Buy milk</td>
	  </tr>
	  <tr>
	    <td>5:45</td>
	    <td>&#160;</td>
	    <td>Arrive home, put milk in fridge…drat!</td>
	  </tr>
	</tbody>
      </informaltable>

      <para>The solution, clearly, is that exactly one person—you or your roommate—buys milk. To do so, you must synchronise your actions:</para> 

      <orderedlist>
	<listitem>
	  <para>If your roommate’s left a note telling you that he’s gone to get milk, just wait for him to return. Otherwise, leave a note for your roommate: “I’m buying milk”, then go to step 2.</para>
	  </listitem>
	 <listitem>
	   <para>If there is no milk, go to the shop, buy some, then put the milk in the fridge.</para>
	 </listitem>
	 <listitem>
	   <para>Throw away the note you left.</para>
	 </listitem>
      </orderedlist>

      <para>We can generalise this solution to any shared, modifiable resource with a mutual exclusion—abbreviated as <emphasis>mutex</emphasis>—lock around the code—termed the <emphasis>critical section</emphasis>—which accesses the shared resource. A mutex works like so:</para>

      <orderedlist>
	<listitem>
	  <para>Before entering the critical section, request the mutex. If another thread already holds the mutex, wait until it releases it.</para>
	  </listitem>
	 <listitem>
	   <para>Perform the critical section: access the shared resource.</para>
	 </listitem>
	 <listitem>
	   <para>Release the mutex.</para>
	 </listitem>
      </orderedlist>

      <para><function>Thread.exclusive</function> expects a block constituting a critical section of code, then uses a global mutex to ensure only one thread calls the block at any one time. More generally, a <literal>Mutex</literal> object represents a mutex which can be locked and unlocked independently of any other <literal>Mutex</literal> instance. A <literal>Mutex</literal> is created with <function>Mutex.new</function>. <function>Mutex#synchronize</function> is given a block representing a critical section, which it executes only if no other thread already holds this specific mutex. Both <function>Thread.exclusive</function> and <function>Mutex#synchronize</function> return the value of their block.</para>

      <para>Alternatively, a lower-level interface is available. <function>Mutex#lock</function> obtains a lock with this mutex if possible; it blocks if this mutex is already locked by another thread; and raises a <literal>ThreadError</literal> if this mutex is already locked by the current thread. <function>Mutex#try_lock</function> behaves like <function>#lock</function>, except it never blocks: if this mutex is not locked, it’s locked, and <literal>true</literal> is returned; otherwise, <literal>false</literal> is returned. The <function>Mutex#locked?</function> predicate returns <literal>true</literal> if this mutex is locked; <literal>false</literal>, otherwise. If a given mutex was locked by the current thread, it may be unlocked with <function>Mutex#unlock</function>. Lastly, <function>Mutex#sleep(<replaceable>time</replaceable>)</function> releases the current thread’s lock on this mutex, sleeps for <replaceable>time</replaceable> seconds—or forever if <replaceable>time</replaceable> is <literal>nil</literal>—then locks this mutex. It returns the number of seconds that were slept.</para>

      <para><firstterm>Deadlock</firstterm> is a condition in which two or more threads are waiting for an event that can only be generated by these same threads. It has the following prerequisites, all of which must hold:</para>

      <variablelist>
	<varlistentry>
	  <term>Mutual exclusion</term>
	  <listitem>
	    <para>At least one thread must hold a resource that can not be shared. Requests are delayed until this resource is released.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Hold and wait</term>
	  <listitem>
	    <para>A thread holds one resource while it waits for another.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>No preemption</term>
	  <listitem>
	    <para>Resources are only released voluntarily after completion; neither another thread nor the OS can force the thread to release the resource.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Circular wait</term>
	  <listitem>
	    <para>Two or more threads form a circular chain where each waits for a resource that the next thread in the chain holds.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>Deadlock may be solved by breaking at least one of these conditions.</para>
    </sect2>
  </sect1>
</chapter>
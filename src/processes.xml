<?xml version="1.0" encoding="utf-8"?>
<chapter version="5.0" xml:id="prc.processes" xml:lang="en" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Processes</title>

  <sect1 xml:id="prc.executing">
    <title>Executing</title>

    <sect2 xml:id="prc.backticks">
      <title>Backticks</title>

      <para>A double-quoted string delimited with grave accents (<literal>U＋0060</literal>) characters, or “backticks”, executes its contents as an operating system command and returns the output. This is achieved by the <function>Kernel.`</function> method, which can be redefined to alter these semantics. Alternative delimiters can be used with the corresponding <literal>%x<replaceable>delimiter</replaceable>…<replaceable>delimiter</replaceable></literal> construct, which follows the same rules as <link linkend="str.double-quoted-q">%Q</link>.</para>
      
      <example xml:id="ex.backticks">
	<title>Using backticks to execute commands and retrieve the output</title>

	<programlisting><xi:include href="examples/backticks.rb" parse="text"/></programlisting>
      </example>
    </sect2>

    <sect2 xml:id="prc.exec">
      <title><function>Kernel.exec</function></title>

      <para><function>Kernel.exec</function> replaces the current process image with a new process image. Accordingly, it will not return if successful; if it fails, <literal>SystemCallError</literal> is raised. If a single argument is provided, it is a <literal>String</literal> containing a command line that should be executed by the shell—<literal>/bin/sh</literal> on Unix-like systems; the value of <literal>ENV['RUBYSHELL']</literal> or <literal>ENV['COMPSEC']</literal> otherwise—so is subject to shell expansion. </para>

      <example xml:id="ex.kernel-exec-1">
	<title>Executing commands with <function>Kernel.exec</function> and the shell</title>

	<programlisting><xi:include href="examples/kernel-exec-1.rb" parse="text"/></programlisting>
      </example>

      <para>If multiple <literal>String</literal> arguments are given, the first is the name of a command in the user’s path, and the remainder are the command’s arguments. The command may be either a binary, or an executable script with a shebang. It is executed by a system call from the <literal>exec(3)</literal> family<footnote><para>A consequence is that open file descriptors are passed to the new process. To avoid this, use <link linkend="io.close"><function>IO#close_on_exec=</function></link> or the <literal>:close_others</literal> key in the <link linkend="prc.options-hash">options <literal>Hash</literal></link></para></footnote>, so neither the command or arguments are subject to shell expansion. If the command name is given as an <literal>Array</literal> of the form <literal>[<replaceable>name</replaceable>, <replaceable>argv0</replaceable>]</literal>, <replaceable>name</replaceable> is the command’s name, and <replaceable>argv0</replaceable> is the filename associated with <replaceable>name</replaceable><footnote><para>Changing <replaceable>argv0</replaceable> is useful because some programs, such as <literal>ps(1)</literal> and <literal>top(1)</literal>, will use it in place of the command name, while others, such as <literal>csh(1)</literal>, treat it specially.</para></footnote>.</para>

      <example xml:id="ex.kernel-exec-2">
	<title>Executing commands with <function>Kernel.exec</function></title>

	<programlisting><xi:include href="examples/kernel-exec-2.rb" parse="text"/></programlisting>
      </example>

      <para>In either of these forms, the new process’s environment may be modified by providing a <literal>Hash</literal> of environment variables before the first argument. An environment variable is created for each <literal>String</literal> key, or unset if the corresponding value is <literal>nil</literal>. An <link linkend="prc.options-hash">options <literal>Hash</literal></link> may be supplied for the final argument.</para>

      <example xml:id="ex.kernel-exec-3">
	<title>Executing commands in a given environment with <function>Kernel.exec</function></title>

	<programlisting><xi:include href="examples/kernel-exec-3.rb" parse="text"/></programlisting>
      </example>
    </sect2>

    <sect2 xml:id="prc.system">
      <title><function>Kernel.system</function></title>

      <para><function>Kernel.system</function> interprets its arguments in the same way as <function>exec</function>, but executes the command in a subshell then returns. Its return value is <literal>true</literal> if the command executed successfully, <literal>false</literal> if the command’s exit status was non-zero, or <literal>nil</literal> if the command failed to execute.</para>

      <example xml:id="ex.kernel-system">
	<title>Executing commands with <function>Kernel.system</function></title>

	<programlisting><xi:include href="examples/kernel-system.rb" parse="text"/></programlisting>
      </example>
    </sect2>

    <sect2 xml:id="prc.spawn">
      <title><function>Kernel.spawn</function></title>

      <para><function>Kernel.spawn</function> also interprets its arguments in the same way as <function>exec</function>, but executes the command in a subshell then returns without waiting for the command to complete. Its return value is an <literal>Integer</literal> holding the <acronym>PID</acronym> of the new process.</para>

      <example xml:id="ex.kernel-spawn">
	<title>Executing commands with <function>Kernel.spawn</function></title>

	<programlisting><xi:include href="examples/kernel-spawn.rb" parse="text"/></programlisting>
      </example>
    </sect2>

    <sect2 xml:id="prc.options-hash">
      <title>Options <literal>Hash</literal></title>

      <para><function>exec</function>, <function>system</function>, and <function>spawn</function> all accept an options <literal>Hash</literal> as their last argument. It may contain any of the following keys.</para>

      <informaltable>
	<thead>
	  <tr>
	    <th>Key</th>
	    <th>Default Value</th>
	    <th>Description</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><literal>:unsetenv_others</literal></td>
	    <td><literal>false</literal></td>
	    <td>If <literal>true</literal> clears the environment variables not named in the <replaceable>env</replaceable> <literal>Hash</literal></td>
	  </tr>
	  <tr>
	    <td><literal>:pgroup</literal></td>
	    <td><literal>nil</literal></td>
	    <td>If <literal>true</literal> or <literal>0</literal>, make a new process group; if an <literal>Integer</literal> join the process group with that ID; if <literal>nil</literal>, don’t change the process group.</td>
	  </tr>
	  <tr>
	    <td><literal>:rlimit_<replaceable>resource</replaceable></literal></td>
	    <td><literal>Process.getrlimit(<replaceable>resource</replaceable>)</literal></td>
	    <td>Where <replaceable>resource</replaceable> is a resource name recognised by <function>Process.setrlimit</function>/<function>Process.getrlimit</function>, sets that resource to the given value. If the value is an <literal>Array</literal>, its first element is the new soft limit, and its second is the new hard limit.</td>
	  </tr>  
	  <tr>
	    <td><literal>:chdir</literal></td>
	    <td><literal>Dir.pwd</literal></td>
	    <td>The value is a <literal>String</literal> naming the directory to change to before invoking the command.</td>
	  </tr>  
	  <tr>
	    <td><literal>:umask</literal></td>
	    <td><literal>File.umask</literal></td>
	    <td>The value is an <literal>Integer</literal> specifying the new value of the process’s file creation mask, or <firstterm>umask</firstterm>.</td>
	  </tr>  
	  <tr>
	    <td><literal>:in</literal></td>
	    <td><literal>STDIN</literal></td>
	    <td>Redirects the standard input stream to the given stream.</td>
	  </tr>  
	  <tr>
	    <td><literal>:out</literal></td>
	    <td><literal>STDOUT</literal></td>
	    <td>Redirects the standard output stream to the given stream.</td>
	  </tr>  
	  <tr>
	    <td><literal>:err</literal></td>
	    <td><literal>STDERR</literal></td>
	    <td>Redirects the standard error stream to the given stream.</td>
	  </tr>  
	  <tr>
	    <td><literal>Integer</literal></td>
	    <td>N/A</td>
	    <td>When the key is an <literal>Integer</literal>, it is interpreted as a file descriptor to redirect to the given stream.</td>
	  </tr>  
	  <tr>
	    <td><literal>IO</literal></td>
	    <td>N/A</td>
	    <td>When the key is an <literal>IO</literal> object, its file descriptor is redirected to the given stream.</td>
	  </tr>  
	  <tr>
	    <td><literal>Array</literal></td>
	    <td>N/A</td>
	    <td>Each element is a file descriptor specified in any of the formats listed above. They are all redirected to the given stream.</td>
	  </tr>  
	  <tr>
	    <td><literal>:close_others</literal></td>
	    <td><literal>true</literal> for <function>system</function> and <function>exec</function>; <literal>false</literal> otherwise.</td>
	    <td>If <literal>true</literal>, the process does not inherit its parent’s file descriptors; otherwise it does.</td>
	  </tr>  
	</tbody>
      </informaltable>
      
      <para>The options that redirect an I/O stream may be given a value in any of the following formats.</para>

      <variablelist spacing="compact">
	<varlistentry>
	  <term><literal>:in</literal></term>
	  <listitem>
	    <para>Standard input</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>:out</literal></term>
	  <listitem>
	    <para>Standard output</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>:err</literal></term>
	  <listitem>
	    <para>Standard error</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>String</literal></term>
	  <listitem>
	    <para>File descriptor of <literal>open(<replaceable>string</replaceable>, ?w)</literal></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>[String]</literal></term>
	  <listitem>
	    <para>As above, but with a mode of <literal>File::RDONLY</literal></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>[String, Integer]</literal></term>
	  <listitem>
	    <para>As above, but with the open mode given by the second argument</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>[String, Integer, Integer]</literal></term>
	  <listitem>
	    <para>As above, but with the open permissions given by the third argument</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>:close</literal></term>
	  <listitem>
	    <para>Close this file descriptor</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 xml:id="prc.terminate">
    <title>Terminating</title>

    <para>The current process may be terminated with <function>Kernel.exit(<replaceable>status</replaceable>=1)</function>. If <function>exit</function> is used within a <literal>begin</literal> block, it raises a <literal>SystemExit</literal> exception which may be caught by a corresponding <literal>rescue</literal> clause. Otherwise, it terminates the process with <literal>exit(2)</literal>, using <replaceable>status</replaceable> as the exit status. If  <replaceable>status</replaceable> is <literal>true</literal>, it has the value <literal>0</literal>; if <literal>false</literal> or omitted, it has the value <literal>1</literal>. Prior to termination, <function>exit</function> runs any <link linkend="flo.at_exit"><function>at_exit</function></link> functions or object finalisers. <function>Kernel.exit!</function> is identical to <function>exit</function> except it bypasses both <function>at_exit</function> functions and finalisers.</para>

    <para><function>Kernel.abort(<replaceable>msg</replaceable>=nil)</function> displays the optional message on the standard error stream then terminates the current process. It is equivalent to <literal>$stderr.puts <replaceable>msg</replaceable></literal>—if <replaceable>msg</replaceable> is given—then <literal>exit(false)</literal>.</para>

    <remark>Xref Process.kill when it is written</remark>
  </sect1>

  <sect1 xml:id="prc.status">
    <title>Status</title>

    <para>POSIX systems record the status of stopped and terminated processes as a 16-bit integer. The lower 8 bits are the process’s <firstterm>exit status</firstterm>, i.e. the value returned to its parent; the higher bits are platform-dependent. The status is encapsulated by a <literal>Process::Status</literal> object.</para>

    <para><function>Kernel.`</function> and <function>Kernel.system</function> set the global variable <literal>$?</literal> to the <literal>Process::Status</literal> object corresponding to the command they executed. Methods such as <function>exec</function>, <function>fork</function>, and <function>spawn</function>, cannot set <function>$?</function> because they return before the command has terminated. To retrieve the <literal>Process::Status</literal> object associated with such processes, we must first <firstterm>wait</firstterm> for them to exit.</para>

    <sect2 xml:id="prc.wait">
      <title>Waiting</title>

      <para><function>Process.wait</function> waits for <emphasis>any</emphasis> child process to exit, then returns its PID. <literal>$?</literal> is set to the corresponding <literal>Process::Status</literal> object. <function>Process.wait2</function> also waits for any child process to exit, but returns an <literal>Array</literal> comprising its PID and <literal>Process::Status</literal> object. Both methods raise a <literal>SystemError</literal> if there aren’t any child processes.</para>

      <para><function>Process.waitall</function> waits for <emphasis>all</emphasis> child processes to exit, then returns an <literal>Array</literal> of <literal>[<replaceable>pid</replaceable>, <replaceable>status</replaceable>]</literal> pairs, where <replaceable>pid</replaceable> is the process’s PID, and <replaceable>status</replaceable> its <literal>Process:Status</literal> object. If there are no child processes, an empty <literal>Array</literal> is returned.</para>

      <para><function>Process.waitpid(<replaceable>pid</replaceable>, <replaceable>flags</replaceable>=0)</function> waits on the child process described by <replaceable>pid</replaceable> to exit, then returns its PID. <function>Process.waitpid2(<replaceable>pid</replaceable>, <replaceable>flags</replaceable>=0)</function> does likewise, but returns an <literal>Array</literal> comprising the PID and corresponding <literal>Process::Status</literal> object. Both methods interpret <replaceable>pid</replaceable> as follows:</para>

      <informaltable>
	<thead>
	  <tr>
	    <th><replaceable>pid</replaceable></th>
	    <th>Semantics</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td>&lt; −1</td>
	    <td>Any child whose process group ID equals the absolute value of <replaceable>pid</replaceable></td>
	  </tr>
	  <tr>
	    <td>−1</td>
	    <td>Any child</td>
	  </tr>
	  <tr>
	    <td>0</td>
	    <td>Any child whose process group ID equals that of the current process.</td>
	  </tr>
	  <tr>
	    <td>&gt; 0</td>
	    <td>The child with the PID of <replaceable>pid</replaceable>.</td>
	  </tr>
	</tbody>
      </informaltable>

      <para><replaceable>flags</replaceable> is either 0, or a logical OR of the following constants. Some platforms may not support these flags.</para>

      <variablelist spacing="compact">
	<varlistentry>
	  <term><literal>Process::WNOHANG</literal></term>
	  <listitem>
	    <para>The method will not block if status is not immediately available for one of the specified child processes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>Process::WUNTRACED</literal></term>
	  <listitem>
	    <para>The status of any specified child processes that are stopped, but whose status has not been reported since they stopped, will also be reported.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>A child process that is not waited on may become a <firstterm>zombie</firstterm>—remaining in the process table in case somebody wants to retrieve its status. <function>Process.detach(<replaceable>pid</replaceable>)</function> offers a solution by running a background thread to monitor the status of <replaceable>pid</replaceable>, then reap it—i.e. remove the process from the process table—when terminated. It returns the <literal>Thread</literal> object.</para>
    </sect2>

    <sect2 xml:id="prc.process-status">
      <title><literal>Process::Status</literal></title>

      <para>If a process has exited, <function>Process::Status#exitstatus</function> returns its exit status as an <literal>Integer</literal> byte. If it exited because of a signal, <function>Process::Status#termsig</function> returns the signal number; otherwise it returns <literal>nil</literal>. If the process was stopped by a signal, <function>Process::Status#stopsig</function> returns the signal number; otherwise it returns <literal>nil</literal>. <function>Process::Status#pid</function> returns the PID of the corresponding process. In addition, the following predicates are defined:</para>

      <variablelist>
	<varlistentry>
	  <term><literal>Process::Status#coredump?</literal></term>
	  <listitem>
	    <para>Returns <literal>true</literal> if the process generated a coredump when it terminated; <literal>false</literal> otherwise.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>Process::Status#exited?</literal></term>
	  <listitem>
	    <para>Returns <literal>true</literal> if the process terminated normally; <literal>false</literal> otherwise.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>Process::Status#signaled?</literal></term>
	  <listitem>
	    <para>Returns <literal>true</literal> if the process terminated due to the receipt of a signal which was not caught; <literal>false</literal> otherwise.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>Process::Status#stopped?</literal></term>
	  <listitem>
	    <para>Returns <literal>true</literal> if the process is currently stopped; <literal>false</literal> otherwise. Only meaningful if the <literal>Process::WUNTRACED</literal> flag was given to <function>waitpid</function> or <function>waitpid2</function>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>Process::Status#success?</literal></term>
	  <listitem>
	    <para>Returns <literal>true</literal> if the process exited normally, <literal>false</literal> if it exited abnormally, and <literal>nil</literal> if it hasn’t exited.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

	
      <para>A <literal>Process::Status</literal> object may also be treated as a collection of bits: <function>Process::Status#to_i</function> returns the status as an <literal>Integer</literal>; <function>Process::Status#&amp;(<replaceable>n</replaceable>)</function> performs a logical AND of the bits with <replaceable>n</replaceable>; and <function>Process::Status#&gt;&gt;(<replaceable>n</replaceable>)</function> shifts the bits right by <replaceable>n</replaceable> places.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="prc.daemons">
    <title>Daemons</title>

    <para>A <firstterm>daemon</firstterm> is a process that runs in the background—rather than under the direct control of a user—to provide a service for other programs. <function>Process.daemon(<replaceable>keep_dir</replaceable>=false, <replaceable>redirect</replaceable>=false)</function> detaches the current process from its controlling terminal, then runs it in the background. The process’s working directory is set to <filename>/</filename> unless <replaceable>keep_dir</replaceable> is <literal>true</literal>. If <replaceable>redirect</replaceable> is <literal>true</literal>, the process’s standard input, output, and error streams are all redirected to <filename>/dev/null</filename>. If the process is successfully daemonised, this method returns <literal>0</literal>; otherwise an <literal>Errno</literal> exception is raised.</para>

    <para>This method uses the <function>daemon(3)</function> syscall if its available, or forks then calls <function>Process.setssid</function>. On platforms with neither option available, a <literal>NotImplementedError</literal> is raised.</para>
  </sect1>

  <sect1 xml:id="prc.ids">
    <title>IDs</title>

    <para>On UNIX-like systems, users, processes, and groups are associated with various IDs. In order to explain how these can be manipulated via methods of the <literal>Process</literal> module, some background theory is necessary…</para>
 
  <para>When a process is invoked it is allocated a process ID (hereafter: <acronym>PID</acronym>) by which it can be uniquely identified. The PID of the current process is returned by <function>Process.pid</function>. Every process, other than <emphasis>init</emphasis>, has a <firstterm>parent</firstterm>: a process which spawned it. The parent’s PID is returned by <function>Process.ppid</function>. On Windows, this always returns <literal>0</literal>.</para>

    <para>A user, identified by a user ID (hereafter: <acronym>UID</acronym>), is a member of at least one group, each of which is identified by a group ID (hereafter: GID). When a user is a member of multiple groups, one is designated his <firstterm>primary group</firstterm><footnote><para>This is the group listed alongside a user’s username in <filename>/etc/passwd</filename>.</para></footnote>, and the remainder his <firstterm>supplementary groups</firstterm>. A user’s GID is the GID of his primary group. Every process is also associated with a UID and GID. When a user logs in, the UID and GID of his login shell are set to his UID and GID, respectively. Normally a process inherits the UID and GID of its parent, so the processes invoked by a user will also be associated with his UID and GID. The UID of the current process is returned by <function>Process.uid</function>, and may be set with <function>Process.uid=</function>. Likewise, the GID of the current process may be retrieved and set with <function>Process.gid</function> and <function>Process.gid=</function>, respectively.</para>

    <para>Processes are associated with a list of supplemental groups in much the same way. A user’s login shell is associated with his supplementary groups, which are then inherited by the processes he creates. <function>Process.groups</function> returns an <literal>Array</literal> of GIDs for the current process’s supplementary groups. <function>Process.groups=</function> is given an <literal>Array</literal> of GIDs or group names, with which it sets the process’s supplementary group IDs. The <literal>Array</literal>s of GIDs must not contain more than 32 elements. This limit can be increased, up to a maximum of 4096, with <function>Process.maxgroups=</function>. The current limit is returned by <function>Process.maxgroups</function>. <function>Process.initgroups(<replaceable>user</replaceable>, <replaceable>group</replaceable>)</function> initialises the list of supplementary groups from <replaceable>user</replaceable>’s, and adds to this set <replaceable>group</replaceable>. <replaceable>user</replaceable> is a username given as a <literal>String</literal>, and <replaceable>group</replaceable> is a GID given as an <literal>Integer</literal>.</para>

    <para>A process is also associated with an <firstterm>effective user ID</firstterm> (hereafter: <acronym>EUID</acronym>) and an <firstterm>effective group ID</firstterm> (hereafter: <acronym>EGID</acronym>). Initially, the EUID has the same value as the UID, and the EGID has the same value as the GID. However, if the mode of an executable file has its <firstterm>setuid</firstterm> (a contraction of <emphasis>set user ID</emphasis>) and/or <firstterm>setgid</firstterm> bit set, the EUID or EGID, respectively, of the process is that of the file’s owner/group. Before the EUID/EGID are set, the current value is saved in order to determine what EUIDs/EGIDs the user may switch to. For example, if a file was owned by user <emphasis>zach</emphasis> and had its setuid bit set, when user <emphasis>zoe</emphasis> executed it the process would have a UID and GID corresponding to her UID and GID, an EGID corresponding to her GID, but an EUID with the value of <emphasis>zach</emphasis>’s UID. The EUID and EGID of the current process are returned by <function>Process.euid</function> and <function>Process.egid</function>, respectively, and set with <function>Process.euid=</function> and <function>Process.egid=</function>, respectively.</para>

    <para>For the purposes of job control, a process is assigned a <firstterm>process group</firstterm>. This allows signals to be sent to a group of processes at once. A process group also has an ID (hereafter: <acronym>PGID</acronym>), which is initially that of its leader. The PGID is returned by <function>Process.getpgrp</function>, and the PGID of an arbitrary process may be retrieved with <function>Process.getpgid(<replaceable>PID</replaceable>)</function>. <function>Process.getpgid(0)</function> is equivalent to <function>Process.getpgrp</function>. The PGID of the current process may be set to its PID with <function>Process.setpgrp</function>, while <function>Process.setpgid(<replaceable>PID</replaceable>, <replaceable>PGID</replaceable>)</function> sets the PGID of the process with a PID of <replaceable>PID</replaceable> to <replaceable>PGID</replaceable>. If either value is <literal>0</literal>, it implies the value of this attribute for the current process, i.e. <literal>Process.setpgid(0,0)</literal> is equivalent to <function>Process.setpgrp</function>.</para>

    <para>A <firstterm>session</firstterm> is a collection of process groups. The session ID (hereafter: <acronym>SID</acronym>) is the PID of the session leader. <quote>Sessions arrange a logged-in user’s activities, and associate that user with a <firstterm>controlling terminal</firstterm>, which is a specific tty device that handles the user’s terminal I/O.</quote> <biblioref linkend="bib.love07" begin="154" end="155" units="pages"/>. <function>Process.setsid</function> <quote>creates a new process group inside of a new session, and makes the invoking process the leader of both</quote>, returning the new SID of the calling process. <biblioref linkend="bib.love07" begin="156" end="157" units="pages"/> However, this method will raise <literal>Errno::EPERM</literal> if the calling process is already a process group leader.</para>

    <sect2 xml:id="prc.process-gid">
      <title><literal>Process::GID</literal></title>

      <para>The <literal>Process::GID</literal> module provides a higher-level interface to GIDs. <function>Process::GID.change_privilege(<replaceable>gid</replaceable>)</function> changes the GID, EGID, and saved GID to <replaceable>gid</replaceable>, which it then returns. On error, an <literal>Errno</literal> exception is raised. This is incompatible with <function>Process.gid=</function>.</para>

      <para>The <function>setresgid(2)</function> and <function>setregid(2)</function> system calls allow the GID and EGID to be exchanged with each other. On such systems, <function>Process::GID.re_exchangeable?</function> returns <literal>true</literal>, and <function>Process::GID.re_exchange</function> may be used to set the GID to the current EGID, the EGID to the current GID, and the saved GID to the new EGID. <function>Process::GID.grant_privilege(<replaceable>egid</replaceable>)</function>, and its alias <function>Process::GID.eid=(<replaceable>egid</replaceable>)</function>, set the EGID to <replaceable>egid</replaceable>, or raise an <literal>Errno</literal> exception. If the GID and EGID may be exchanged, these methods also set the saved GID to <replaceable>egid</replaceable>.</para>

      <para><function>Process::GID.switch</function> sets the EGID to the GID, returning the former. If given a block whose body does not modify these values, it ensures that the EGID is reset to its original value.</para>

      <para>The <function>Process::GID.sid_available?</function> predicate returns <literal>true</literal> if the operating system supports saved GIDs; <literal>false</literal>, otherwise. In the latter case, Ruby saves the GID itself and tries to emulate this functionality.</para>
    </sect2>

    <sect2 xml:id="prc.process-uid">
      <title><literal>Process::UID</literal></title>

      <para>The <literal>Process::UID</literal> module is the equivalent of <literal>Process::GID</literal> for UIDs. The methods it provides are identical except they manipulate UIDs/EUIDs rather than GIDs/EGIDs. The <function>setresuid(2)</function> or <function>setreuid(2)</function> system call is required for exchanging the UID with the EUID.</para> 
    </sect2>

    <sect2 xml:id="prc.process-sys">
      <title><literal>Process::Sys</literal></title>

      <para>The <literal>Process::Sys</literal> module, however, provides lower-level access to the system calls used for manipulating user and group IDs. The <function>Process::Sys.getegid</function>, <function>Process::Sys.geteuid</function>, <function>Process::Sys.geteuid</function>, <function>Process::Sys.getgid</function>, and <function>Process::Sys.getuid</function> methods are aliases of <function>Process.egid</function>, <function>Process.euid</function>, <function>Process.gid</function>, and <function>Process.uid</function>, respectively. The following methods are defined in terms of the system call with the same name as the method. Each raises an <literal>Errno</literal> exception if the system call fails, or <literal>NotImplementedError</literal> if the system call does not exist.</para>

       <variablelist>
	 <varlistentry>
	   <term><literal>Process::Sys.issetugid</literal></term>
	   <listitem>
	     <para>Returns <literal>true</literal> if the process is either setuid or setgid; <literal>false</literal>, otherwise.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setegid(<replaceable>gid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the EGID to <replaceable>gid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.seteuid(<replaceable>uid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the EUID to <replaceable>uid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setgid(<replaceable>gid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the GID to <replaceable>gid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setregid(<replaceable>gid</replaceable>, <replaceable>egid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the real GID to <replaceable>gid</replaceable>, and the EGID to <replaceable>egid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setresgid(<replaceable>gid</replaceable>, <replaceable>egid</replaceable>, <replaceable>sgid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the real GID to <replaceable>gid</replaceable>, the EGID to <replaceable>egid</replaceable>, and the saved GID to <replaceable>sgid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setresuid(<replaceable>uid</replaceable>, <replaceable>euid</replaceable>, <replaceable>suid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the real UID to <replaceable>uid</replaceable>, the EUID to <replaceable>euid</replaceable>, and the saved UID to <replaceable>suid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setreuid(<replaceable>uid</replaceable>, <replaceable>euid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the real UID to <replaceable>uid</replaceable>, and the EUID to <replaceable>euid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setrgid(<replaceable>gid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the real GID to <replaceable>gid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setruid(<replaceable>uid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the real UID to <replaceable>uid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
	 <varlistentry>
	   <term><literal>Process::Sys.setuid(<replaceable>uid</replaceable>)</literal></term>
	   <listitem>
	     <para>Sets the UID to <replaceable>uid</replaceable>.</para>
	   </listitem>
	 </varlistentry>
      </variablelist>
    </sect2>
  </sect1>
</chapter>
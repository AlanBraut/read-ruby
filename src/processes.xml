<?xml version="1.0" encoding="utf-8"?>
<chapter version="5.0" xml:id="prc.processes" xml:lang="en" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Processes</title>

  <sect1 xml:id="prc.executing">
    <title>Executing</title>

    <sect2 xml:id="prc.backticks">
      <title>Backticks</title>

      <para>A double-quoted string delimited with grave accents (<literal>U＋0060</literal>) characters, or “backticks”, executes its contents as an operating system command and returns the output. This is achieved by the <function>Kernel.`</function> method, which can be redefined to alter these semantics. Alternative delimiters can be used with the corresponding <literal>%x<replaceable>delimiter</replaceable>…<replaceable>delimiter</replaceable></literal> construct, which follows the same rules as <link linkend="str.double-quoted-q">%Q</link>.</para>
      
      <example xml:id="ex.backticks">
	<title>Using backticks to execute commands and retrieve the output</title>

	<programlisting><xi:include href="examples/backticks.rb" parse="text"/></programlisting>
      </example>
    </sect2>

    <sect2 xml:id="prc.exec">
      <title><function>Kernel.exec</function></title>

      <para><function>Kernel.exec</function> replaces the current process image with a new process image. Accordingly, it will not return if successful; if it fails, <literal>SystemCallError</literal> is raised. If a single argument is provided, it is a <literal>String</literal> containing a command line that should be executed by the shell—<literal>/bin/sh</literal> on Unix-like systems; the value of <literal>ENV['RUBYSHELL']</literal> or <literal>ENV['COMPSEC']</literal> otherwise—so is subject to shell expansion. </para>

      <example xml:id="ex.kernel-exec-1">
	<title>Executing commands with <function>Kernel.exec</function> and the shell</title>

	<programlisting><xi:include href="examples/kernel-exec-1.rb" parse="text"/></programlisting>
      </example>

      <para>If multiple <literal>String</literal> arguments are given, the first is the name of a command in the user’s path, and the remainder are the command’s arguments. The command may be either a binary, or an executable script with a shebang. It is executed by a system call from the <literal>exec(3)</literal> family<footnote><para>A consequence is that open file descriptors are passed to the new process. To avoid this, use <link linkend="io.close"><function>IO#close_on_exec=</function></link></para></footnote>, so neither the command or arguments are subject to shell expansion. If the command name is given as an <literal>Array</literal> of the form <literal>[<replaceable>name</replaceable>, <replaceable>argv0</replaceable>]</literal>, <replaceable>name</replaceable> is the command’s name, and <replaceable>argv0</replaceable> is the filename associated with <replaceable>name</replaceable><footnote><para>Changing <replaceable>argv0</replaceable> is useful because some programs, such as <literal>ps(1)</literal> and <literal>top(1)</literal>, will use it in place of the command name, while others, such as <literal>csh(1)</literal>, treat it specially.</para></footnote>.</para>

      <example xml:id="ex.kernel-exec-2">
	<title>Executing commands with <function>Kernel.exec</function></title>

	<programlisting><xi:include href="examples/kernel-exec-2.rb" parse="text"/></programlisting>
      </example>

      <para>In either of these forms, the new process’s environment may be modified by providing a <literal>Hash</literal> of environment variables before the first argument. An environment variable is created for each <literal>String</literal> key, or unset if the corresponding value is <literal>nil</literal>.</para>

      <example xml:id="ex.kernel-exec-3">
	<title>Executing commands in a given environment with <function>Kernel.exec</function></title>

	<programlisting><xi:include href="examples/kernel-exec-3.rb" parse="text"/></programlisting>
      </example>
    </sect2>

    <sect2 xml:id="prc.system">
      <title><function>Kernel.system</function></title>

      <para><function>Kernel.system</function> interprets its arguments in the same way as <function>exec</function>, but executes the command in a subshell then returns. Its return value is <literal>true</literal> if the command executed successfully, <literal>false</literal> if the command’s exit status was non-zero, or <literal>nil</literal> if the command failed to execute.</para>

      <example xml:id="ex.kernel-system">
	<title>Executing commands with <function>Kernel.system</function></title>

	<programlisting><xi:include href="examples/kernel-system.rb" parse="text"/></programlisting>
      </example>

      <remark>TODO: Document options Hash</remark>
    </sect2>

    <sect2 xml:id="prc.spawn">
      <title><function>Kernel.spawn</function></title>

      <para><function>Kernel.spawn</function> also interprets its arguments in the same way as <function>exec</function>, but executes the command in a subshell then returns without waiting for the command to complete. Its return value is an <literal>Integer</literal> holding the <acronym>PID</acronym> of the new process.</para>

      <example xml:id="ex.kernel-spawn">
	<title>Executing commands with <function>Kernel.spawn</function></title>

	<programlisting><xi:include href="examples/kernel-spawn.rb" parse="text"/></programlisting>
      </example>
    </sect2>
  </sect1>
</chapter>
<?xml version="1.0" encoding="utf-8"?>
<appendix version="5.0"
         xml:id="ref.kernel" 
	 xml:lang="en" xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  
  <title>Kernel</title>


  <para><methodsynopsis><type>Array</type><methodname>Kernel.Array</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Converts <parameter>object</parameter> to an <literal>Array</literal> with either <function>#to_ary</function> or <function>#to_a</function>. If neither succeed, returns a new <literal>Array</literal> with <parameter>object</parameter> as its sole element. If <parameter>object</parameter> is <literal>nil</literal>, returns <literal>[]</literal>.</para>

  <para><methodsynopsis><type>Complex</type><methodname>Kernel.Complex</methodname><methodparam><parameter>real</parameter></methodparam><methodparam choice="opt"><parameter>imaginary=0</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>Complex</type><methodname>Kernel.Complex</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Creates and returns a <literal>Complex</literal> number. The first form sets the real part to <parameter>real</parameter>, and the imaginary part to <parameter>imaginary</parameter>, both of which may be <literal>Numeric</literal>s or <literal>String</literal>s. The second form expects a <literal>String</literal> representation of a complex number, i.e. the <function>#to_s</function> form of a <literal>Numeric</literal>, <literal>+</literal> or <literal>-</literal>, the <function>#to_s</function> form of another <literal>Numeric</literal>, then <literal>i</literal>.</para>

  <para><methodsynopsis><type>Float</type><methodname>Kernel.Float</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns the argument converted to a <literal>Float</literal>, either implicitly—if <literal>Numeric</literal>—or via <function>#to_f</function>. A <exceptionname>TypeError</exceptionname> is raised if <parameter>object</parameter> is <literal>nil</literal>.</para>

  <para><methodsynopsis><type>Integer</type><methodname>Kernel.Integer</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns the argument converted to a <literal>Fixnum</literal> or <literal>Bignum</literal>, either implicitly—if <literal>Numeric</literal>—or via <function>#to_int</function> or <function>#to_i</function>. If <parameter>object</parameter> is a <literal>String</literal>, leading radix indications are understood: a <literal>0</literal> prefix implies octal, <literal>0b</literal>, binary, and <literal>0x</literal>, hexadecimal. A <exceptionname>TypeError</exceptionname> is raised if <parameter>object</parameter> is <literal>nil</literal>.</para>
  
  <para><methodsynopsis><type>Rational</type><methodname>Kernel.Rational</methodname><methodparam><parameter>numerator</parameter></methodparam><methodparam choice="opt"><parameter>denominator=1</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>Rational</type><methodname>Kernel.Rational</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Creates and returns a <literal>Rational</literal> number. The first form sets the numerator to <parameter>numerator</parameter>, and the denominator to <parameter>denominator</parameter>, both of which may be <literal>Numeric</literal>s or <literal>String</literal>s. The second form expects a <literal>String</literal> representation of a rational number, i.e. the <function>#to_s</function> form of a <literal>Numeric</literal>, <literal>/</literal>, then the <function>#to_s</function> form of another <literal>Numeric</literal>.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.String</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Converts <parameter>object</parameter> to a <literal>String</literal> with <function>#to_s</function>, which it then returns.</para>

  <para><methodsynopsis><type>Symbol or nil</type><methodname>Kernel.__callee__</methodname><void/></methodsynopsis> Returns the name of the current method, or <literal>nil</literal> if called outside of a method. Aliased to <function>Kernel.__method__</function>.</para>

  <para><methodsynopsis><type>Symbol or nil</type><methodname>Kernel.__method__</methodname><void/></methodsynopsis> Aliases <function>Kernel.__callee__</function>.</para>
  
  <para><methodsynopsis><type>String</type><methodname>Kernel.`</methodname><methodparam><parameter>command</parameter></methodparam></methodsynopsis> Runs the <literal>String</literal> <parameter>command</parameter> in a subshell, then returns its standard output.</para>

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.abort</methodname><methodparam choice="opt"><parameter>message</parameter></methodparam></methodsynopsis> Terminates the current process with an exit code of <literal>1</literal>. If the <parameter>message</parameter> <literal>String</literal> is given, it is written to standard error.</para>

  <para><methodsynopsis><type>Proc</type><methodname>Kernel.at_exit</methodname><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Registers the given block to be executed just prior to program termination—if multiple blocks are registered in this way, they are executed in reverse chronological order.</para>

  <para><methodsynopsis><type>nil</type><methodname>Kernel.autoload</methodname><methodparam><parameter>constant</parameter></methodparam><methodparam><parameter>filename</parameter></methodparam></methodsynopsis> Causes the given filename to be required with <function>Kernel.require</function> the first time the constant named <parameter>constant</parameter> is accessed. The constant name is given as a <literal>String</literal> or <literal>Symbol</literal>, and resolved relative to the current scope.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>Kernel.autoload?</methodname><methodparam><parameter>constant</parameter></methodparam></methodsynopsis> Returns the filename that will be autoloaded when the constant named <parameter>constant</parameter> is first accessed at the top-level, or <literal>nil</literal> if there is no file registered.</para>

  <para><methodsynopsis><type>Binding</type><methodname>Kernel.binding</methodname><void/></methodsynopsis> Returns a <literal>Binding</literal> encapsulating the variable and method bindings at its call site.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel.block_given?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the current method has been given a block argument; otherwise, <literal>false</literal>. Aliased by <function>Kernel.iterator?</function>.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel.caller</methodname><methodparam choice="opt"><parameter>omit=0</parameter></methodparam></methodsynopsis> Returns the current execution stack as an <literal>Array</literal> of <literal>String</literal>s, skipping the first <parameter>omit</parameter> frames. A frame has the form <literal><replaceable>file</replaceable>:<replaceable>line</replaceable>:in `<replaceable>location</replaceable>'</literal>. <replaceable>file</replaceable> is an absolute filename, or, if there is no associated file, a parenthesised description of the location, e.g. <literal>(irb)</literal>. <replaceable>line</replaceable> is the line number. Lastly, <replaceable>location</replaceable> is normally the method name, possibly preceded by <literal>block in </literal> or <literal>block(n levels) in </literal>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.catch</methodname><methodparam choice="opt"><parameter>object=Object.new</parameter></methodparam><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Executes its block, expecting it to throw an object equal to <parameter>object</parameter>. If such a throw-clause is found, <function>catch</function> terminates its block, returning <function>throw</function>’s second argument. Otherwise, it returns the last expression of the block.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.chomp</methodname><methodparam choice="opt"><parameter>string</parameter></methodparam></methodsynopsis> If <literal>$_</literal> ends with <parameter>string</parameter>, <parameter>string</parameter> is deleted; otherwise, this method is a no-op. Returns the new value of <literal>$_</literal>. This method is only defined when the <option>-n</option> or <option>-p</option> options are given to the interpreter.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.chop</methodname><void/></methodsynopsis> If <literal>$_</literal> ends with <literal>\r\n</literal>, both characters are removed; otherwise, just the last character is removed. Returns the new value of <literal>$_</literal>. This method is only defined when the <option>-n</option> or <option>-p</option> options are given to the interpreter.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.eval</methodname><methodparam><parameter>string</parameter></methodparam><methodparam choice="opt"><parameter>binding</parameter></methodparam><methodparam choice="opt"><parameter>file</parameter></methodparam><methodparam><parameter>line</parameter></methodparam></methodsynopsis> Evaluates <parameter>string</parameter> as Ruby code, then returns the result. If a <literal>Binding</literal> object is given as <parameter>binding</parameter>, the evaluation occurs in the binding’s context. If a filename and line number are given as <parameter>file</parameter> and <parameter>line</parameter>, respectively, they are used in reporting errors emanating from the evaluation.</para>

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.exec</methodname><methodparam choice="opt"><parameter>environment={}</parameter></methodparam><methodparam><parameter>command</parameter></methodparam><methodparam rep="repeat" choice="opt"><parameter>argument</parameter></methodparam><methodparam choice="opt"><parameter>options={}</parameter></methodparam></methodsynopsis> Replaces the current process image with a new process image by executing <parameter>command</parameter> with the given <parameter>argument</parameter>s. <parameter>command</parameter> is subject to shell expansion only if no <parameter>argument</parameter>s are given. If <parameter>command</parameter> is given as an <literal>Array</literal>, its first element is the command to be executed, and its last element is that command’s <literal>argv[0]</literal>. On Unix-like systems, this method uses a system call from the <function>exec(2)</function> family, so the new process inherits most of the current process’s environment—including its file descriptors. If the <parameter>environment</parameter> <literal>Hash</literal> is present, it specifies environment variables for the new process: a <literal>String</literal> value sets the corresponding environment variable; a <literal>nil</literal> value clears it. <parameter>options</parameter> is an <link linkend="prc.options-hash">options <literal>Hash</literal></link>. If the command executes successfully, this method doesn’t return; otherwise, a <exceptionname>SystemCallError</exceptionname> is raised.</para>

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.exit</methodname><methodparam choice="opt"><parameter>status=1</parameter></methodparam></methodsynopsis> Exits the current process with a status of <parameter>status</parameter>, or raises <exceptionname>SystemExit</exceptionname> if called within an exception handler. A <parameter>status</parameter> of <literal>true</literal> is equivalent to <literal>0</literal>; <literal>false</literal>, <literal>1</literal>.</para> 

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.exit!</methodname><methodparam choice="opt"><parameter>status=1</parameter></methodparam></methodsynopsis> Behaves as <function>Kernel.exit</function>, but bypasses exception handlers, <function>Kernel.at_exit</function> blocks, and finalisers.</para>

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.fail</methodname><void/></methodsynopsis>
<methodsynopsis><type>N/A</type><methodname>Kernel.fail</methodname><methodparam><parameter>message</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>N/A</type><methodname>Kernel.fail</methodname><methodparam><parameter>exception</parameter></methodparam><methodparam choice="opt"><parameter>message=""</parameter></methodparam><methodparam choice="opt"><parameter>backtrace</parameter></methodparam></methodsynopsis> The first form re-raises the exception in <literal>$!</literal>, or raises a new <exceptionname>RuntimeError</exceptionname> if <literal>$!</literal> is <literal>nil</literal>. If a <literal>String</literal> <parameter>message</parameter> is given, raises a <exceptionname>RuntimeError</exceptionname> with the given message. If <parameter>exception</parameter>—either an <literal>Exception</literal> class, or an object whose <function>#exception</function> method returns an <literal>Exception</literal>—it is raised with the given message. If <parameter>backtrace</parameter> is also given, it is an <literal>Array</literal> of <literal>String</literal>s used for the exception’s backtrace; otherwise, the backtrace is generated automatically. Aliased by <function>Kernel.raise</function>.</para>

  <para><methodsynopsis><type>Integer or nil</type><methodname>Kernel.fork</methodname><methodparam choice="opt"><parameter>{ }</parameter></methodparam></methodsynopsis> Forks the current process to create a subprocess. If the block is specified, it is run in the subprocess; otherwise this method returns to the parent, the process ID of the child, and to the child, <literal>nil</literal>.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.format</methodname><methodparam><parameter>format</parameter></methodparam><methodparam rep="repeat" choice="opt"><parameter>argument</parameter></methodparam></methodsynopsis> Applies the format <literal>String</literal>, <parameter>format</parameter>, to the <parameter>argument</parameter>(s) to create a new <literal>String</literal>, which is returned. Aliased by <function>Kernel.sprintf</function>.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>Kernel.gets</methodname><methodparam choice="opt"><parameter>separator=$/</parameter></methodparam></methodsynopsis> Returns the next line from <literal>ARGV</literal>, or <literal>nil</literal> at end of file. Lines are separated by, and include, <parameter>separator</parameter>. A <parameter>separator</parameter> of <literal>nil</literal> treats an entire file as a single line, while a <parameter>separator</parameter> of <literal>""</literal> is equivalent to <literal>"\n\n"</literal>. Each line read is assigned to <literal>$_</literal>.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel.global_variables</methodname><void/></methodsynopsis> Returns the names—as <literal>Symbol</literal>s—of all defined global variables.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.gsub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>String</type><methodname>Kernel.gsub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Behaves as <function>String#gsub</function> with an implicit receiver of <literal>$_</literal>. If substitution occurs, assigns the result back to <literal>$_</literal>. This method is only defined when the <option>-n</option> or <option>-p</option> options are given to the interpreter.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel.iterator?</methodname><void/></methodsynopsis> Aliases <function>Kernel.block_given?</function>.</para>

  <para><methodsynopsis><type>Proc</type><methodname>Kernel.lambda</methodname><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Creates a <literal>Proc</literal> with lambda semantics from the given block.</para>

  <para><methodsynopsis><type>true</type><methodname>Kernel.load</methodname><methodparam><parameter>filename</parameter></methodparam><methodparam choice="opt"><parameter>wrap=false</parameter></methodparam></methodsynopsis> Resolves <parameter>filename</parameter> relative to a directory in <literal>$LOAD_PATH</literal>, then loads and executes the Ruby code that it contains. If <parameter>wrap</parameter> is <literal>true</literal>, the code will be executed within an anonymous module, preventing it from modifying the global namespace.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel.local_variables</methodname><void/></methodsynopsis> Returns the names of the current local variables as an <literal>Array</literal> of <literal>Symbol</literal>s.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.loop</methodname><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Executes the given block repeatedly. If the block raises a <literal>StopIteration</literal> exception, the exception is rescued automatically and the loop terminated.</para> 

  <para><methodsynopsis><type>Object</type><methodname>Kernel.open</methodname><methodparam><parameter>filename</parameter></methodparam><methodparam choice="opt"><parameter>mode='r'</parameter></methodparam><methodparam choice="opt"><parameter>permissions</parameter></methodparam><methodparam choice="opt"><parameter>{|io| }</parameter></methodparam></methodsynopsis> Opens a file named <parameter>filename</parameter>, which it returns as a <literal>File</literal> object. The <parameter>mode</parameter> may be either a given as a <link linkend="io.mode-string">mode string</link> or a logical OR of the file <link linkend="io.open-flags">open flags</link>. The permissions of the file are given by the <literal>Integer</literal> <parameter>permissions</parameter>, the meaning of which is platform dependent. If a block is given, the new <literal>File</literal> object will be passed to it, then closed when the block exits; the value of the block is returned to the caller. If <parameter>filename</parameter> begins with a pipe character (<literal>|</literal>), a subprocess is created instead. A pair of pipes connected to the standard input and output of this process are returned as an <literal>IO</literal> object. If the <parameter>filename</parameter> is <literal>|-</literal>, the interpreter forks, and <literal>nil</literal> is returned to the child; otherwise, the pipe character should be followed by the name of a command that is to be run in the subprocess. When a block is also given, it is run in both the parent and child process: in the former, its passed an <literal>IO</literal> object connected to the child’s standard input and output; in the latter, its passed <literal>nil</literal>. When the block exits, the child process is terminated.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.p</methodname><methodparam rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Writes to standard output the <function>#inspect</function> output for each <parameter>argument</parameter>, concatenated with the current output record separator.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.print</methodname><methodparam rep="repeat" choice="opt"><parameter>argument=$_</parameter></methodparam></methodsynopsis> Writes to standard output the <function>#to_s</function> output of each <parameter>argument</parameter>, concatenated with the output field separator, and terminated with the output record separator.</para>

  <para><methodsynopsis><type>nil</type><methodname>Kernel.printf</methodname><methodparam choice="opt"><parameter>io=STDOUT</parameter></methodparam><methodparam><parameter>format</parameter></methodparam><methodparam rep="repeat" choice="opt"><parameter>argument</parameter></methodparam></methodsynopsis> Writes to <parameter>io</parameter> the result of passing the remaining arguments to <function>Kernel.sprintf</function>.</para>

  <para><methodsynopsis><type>Proc</type><methodname>Kernel.proc</methodname><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Creates and returns a <literal>Proc</literal> with proc semantics for the given block.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.putc</methodname><methodparam><parameter>argument</parameter></methodparam></methodsynopsis> Behaves as <literal>STDOUT.putc(<replaceable>argument</replaceable>)</literal>. See <function>IO#putc</function> for details.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.puts</methodname><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Invokes <function>IO#puts</function> on <literal>STDOUT</literal> with the given <parameter>argument</parameter>s.</para>

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.raise</methodname><void/></methodsynopsis>
<methodsynopsis><type>N/A</type><methodname>Kernel.raise</methodname><methodparam><parameter>message</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>N/A</type><methodname>Kernel.raise</methodname><methodparam><parameter>exception</parameter></methodparam><methodparam choice="opt"><parameter>message=""</parameter></methodparam><methodparam choice="opt"><parameter>backtrace</parameter></methodparam></methodsynopsis> Aliases <function>Kernel.fail</function>.</para>

  <para><methodsynopsis><type>Numeric</type><methodname>Kernel.rand</methodname><methodparam choice="opt"><parameter>max=0</parameter></methodparam></methodsynopsis> Generates a pseudo-random number between <literal>0</literal> and the absolute, integer value of <parameter>max</parameter>. If <parameter>max</parameter> is <literal>0</literal>, it is assumed to be <literal>1.0</literal>, and the return value is a <literal>Float</literal>; otherwise, an <literal>Integer</literal> is returned.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>Kernel.readline</methodname><methodparam choice="opt"><parameter>separator=$/</parameter></methodparam></methodsynopsis> Returns the next line from <literal>ARGV</literal>, or raises <exceptionname>EOFError</exceptionname> at end of file. Lines are separated by, and include, <parameter>separator</parameter>. A <parameter>separator</parameter> of <literal>nil</literal> treats an entire file as a single line, while a <parameter>separator</parameter> of <literal>""</literal> is equivalent to <literal>"\n\n"</literal>. Each line read is assigned to <literal>$_</literal>.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel.readlines</methodname><methodparam choice="opt"><parameter>separator=$/</parameter></methodparam></methodsynopsis> Returns the lines from <literal>ARGV</literal> as an <literal>Array</literal> of <literal>String</literal>s. Lines are separated by, and include, <parameter>separator</parameter>. A <parameter>separator</parameter> of <literal>nil</literal> treats an entire file as a single line, while a <parameter>separator</parameter> of <literal>""</literal> is equivalent to <literal>"\n\n"</literal>.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel.require</methodname><methodparam><parameter>feature</parameter></methodparam></methodsynopsis> Resolves <parameter>feature</parameter> to an absolute path, then loads and executes the Ruby code or extension which it contains. If <parameter>feature</parameter> begins with <literal>~</literal>, <literal>../</literal>, or <literal>/</literal> it is resolved relative to the current working directory; otherwise, against a directory in <literal>$LOAD_PATH</literal>. If the filename does not end with a file extension, <literal>.rb</literal> and the default shared library extensions are appended to it in turn. If <parameter>feature</parameter> cannot be loaded, a <exceptionname>LoadError</exceptionname> is raised. Otherwise, it is searched for in the <literal>$LOADED_FEATURES</literal> <literal>Array</literal>: if present, it is not loaded again, so <literal>false</literal> is returned; if not present, it is appended, and <literal>true</literal> is returned.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel.require_relative</methodname><methodparam><parameter>feature</parameter></methodparam></methodsynopsis> Equivalent to <function>Kernel.require</function>, except <parameter>feature</parameter> is resolved relative to the path of the current source file.</para>

  <para><methodsynopsis><type>Array or nil</type><methodname>Kernel.select</methodname><methodparam><parameter>read_array</parameter></methodparam><methodparam choice="opt"><parameter>write_array</parameter></methodparam><methodparam choice="opt"><parameter>error_array</parameter></methodparam><methodparam choice="opt"><parameter>timeout</parameter></methodparam></methodsynopsis> Waits for any of the given <literal>IO</literal> objects to become ready, then returns those which are. The first three arguments are <literal>Array</literal>s of <literal>IO</literal> objects: those in <parameter>read_array</parameter> are checked for whether they can be read from without blocking; those in <parameter>write_array</parameter>, for whether they be written to without blocking; and those in <parameter>error_array</parameter>, for whether an error occurs on the associated device. When at least one <literal>IO</literal> stream becomes ready, an <literal>Array</literal> of <literal>Array</literal>s is returned: the first element is the streams ready for reading, the second, the streams ready for writing, and the third, the streams encountering an error. If <parameter>timeout</parameter> is given, and there is no change in status for this many seconds, <literal>nil</literal> is returned; otherwise, there is no timeout.</para>

  <para><methodsynopsis><type>Proc or nil</type><methodname>Kernel.set_trace_func</methodname><methodparam><parameter>proc</parameter></methodparam></methodsynopsis> Enables tracing of the current process by invoking the given <literal>Proc</literal> on every event, passing the details to <parameter>proc</parameter> as, at most, six arguments: the event name, the filename, the line number, the object ID, the binding, and the name of the class. If <parameter>proc</parameter> is <literal>nil</literal>, tracing is disabled. See <xref linkend="pro.tracing"/> for further details.</para>

  <para><methodsynopsis><type>Fixnum</type><methodname>Kernel.sleep</methodname><methodparam choice="opt"><parameter>seconds=0</parameter></methodparam></methodsynopsis> Suspends the current thread for <parameter>seconds</parameter> seconds, returning the actual number of seconds slept. <parameter>seconds</parameter> may be an <literal>Integer</literal>, or a <literal>Float</literal> specifying fractional seconds; if it is <literal>0</literal>, the thread sleeps forever.</para>

  <para><methodsynopsis><type>Fixnum</type><methodname>Kernel.spawn</methodname><methodparam choice="opt"><parameter>environment={}</parameter></methodparam><methodparam><parameter>command</parameter></methodparam><methodparam rep="repeat" choice="opt"><parameter>argument</parameter></methodparam><methodparam choice="opt"><parameter>options={}</parameter></methodparam></methodsynopsis> Executes <parameter>command</parameter> with the given <parameter>argument</parameter>s in a subshell, returning immediately with its PID. <parameter>command</parameter> is subject to shell expansion only if no <parameter>argument</parameter>s are given. If <parameter>command</parameter> is given as an <literal>Array</literal>, its first element is the command to be executed, and its last element is that command’s <literal>argv[0]</literal>. On Unix-like systems, this method uses a system call from the <function>exec(2)</function> family, so the new process inherits most of the current process’s environment—including its file descriptors. If the <parameter>environment</parameter> <literal>Hash</literal> is present, it specifies environment variables for the new process: a <literal>String</literal> value sets the corresponding environment variable; a <literal>nil</literal> value clears it. <parameter>options</parameter> is an <link linkend="prc.options-hash">options <literal>Hash</literal></link>. A <exceptionname>SystemCallError</exceptionname> is raised on failure.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.sprintf</methodname><methodparam><parameter>format_string</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Expands the format string by interpolating the given <parameter>argument</parameter>s, then returns the result. See <xref linkend="str.format"/> for further details.</para>

  <para><methodsynopsis><type>Integer</type><methodname>Kernel.srand</methodname><methodparam choice="opt"><parameter>seed</parameter></methodparam></methodsynopsis> Converts <parameter>seed</parameter> to an <literal>Integer</literal>, uses it to seed the pseudo-random number generator, then returns the previous seed. If <parameter>seed</parameter> is omitted, it is derived from a combination of the current time, the PID, and a sequence number.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel.sub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>String</type><methodname>Kernel.sub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Behaves as <function>String#sub</function> with an implicit receiver of <literal>$_</literal>. If substitution occurs, assigns the result back to <literal>$_</literal>. This method is only defined when the <option>-n</option> or <option>-p</option> options are given to the interpreter.</para>

  <para><methodsynopsis><type>Integer</type><methodname>Kernel.syscall</methodname><methodparam><parameter>number</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Performs the system call identified by <parameter>number</parameter>, passing in the given arguments. The arguments must be <literal>String</literal>s or <literal>Integer</literal>s that fit within a native <literal>long</literal>.</para>

  <para><methodsynopsis><type>true, false, or nil</type><methodname>Kernel.system</methodname><methodparam choice="opt"><parameter>environment={}</parameter></methodparam><methodparam><parameter>command</parameter></methodparam><methodparam rep="repeat" choice="opt"><parameter>argument</parameter></methodparam><methodparam choice="opt"><parameter>options={}</parameter></methodparam></methodsynopsis> Executes <parameter>command</parameter> with the given <parameter>argument</parameter>s in a subshell, returning <literal>true</literal> if it ran successfully, <literal>false</literal> if it exited with a non-zero status, and <literal>nil</literal> if it failed to execute. <parameter>command</parameter> is subject to shell expansion only if no <parameter>argument</parameter>s are given. If <parameter>command</parameter> is given as an <literal>Array</literal>, its first element is the command to be executed, and its last element is that command’s <literal>argv[0]</literal>. On Unix-like systems, this method uses a system call from the <function>exec(2)</function> family, so the new process inherits most of the current process’s environment—including its file descriptors. If the <parameter>environment</parameter> <literal>Hash</literal> is present, it specifies environment variables for the new process: a <literal>String</literal> value sets the corresponding environment variable; a <literal>nil</literal> value clears it. <parameter>options</parameter> is an <link linkend="prc.options-hash">options <literal>Hash</literal></link>. A <exceptionname>SystemCallError</exceptionname> is raised on failure.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.test</methodname><methodparam><parameter>command</parameter></methodparam><methodparam><parameter>file1</parameter></methodparam><methodparam choice="opt"><parameter>file2</parameter></methodparam></methodsynopsis> Performs the test given by the <literal>Integer</literal> <parameter>command</parameter> on the named files. See <xref linkend="fil.kernel-test"/> for details.</para>

  <para><methodsynopsis><type>N/A</type><methodname>Kernel.throw</methodname><methodparam><parameter>symbol</parameter></methodparam><methodparam choice="opt"><parameter>object</parameter></methodparam></methodsynopsis> Jumps to the end of the enclosing <literal>catch</literal> block expecting <parameter>symbol</parameter>, or raises a <exceptionname>NameError</exceptionname> if there is no such block. If <parameter>object</parameter> is given, it is returned by the corresponding <literal>catch</literal> block.</para>

  <para><methodsynopsis><type>nil</type><methodname>Kernel.trace_var</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt"><parameter>command</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>nil</type><methodname>Kernel.trace_var</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt"><parameter>{|value| }</parameter></methodparam></methodsynopsis> Traces explicit assignments to the global variable named <parameter>name</parameter>. If <parameter>command</parameter> is a <literal>Proc</literal>, or if a block is supplied, the <literal>Proc</literal> or block is invoked on each assignment with the variable’s new value as a parameter. Otherwise, if <parameter>command</parameter> is a <literal>String</literal>, it is evaluated as Ruby code on each assignment.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel.trap</methodname><methodparam><parameter>signal</parameter></methodparam><methodparam><parameter>proc</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>Object</type><methodname>Kernel.trap</methodname><methodparam><parameter>signal</parameter></methodparam><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Aliases <function>Signal.trap</function>.</para>

  <para><methodsynopsis><type>Array or nil</type><methodname>Kernel.untrace_var</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt"><parameter>command</parameter></methodparam></methodsynopsis> Disables tracing for the global variable named <parameter>name</parameter>. If <parameter>command</parameter> is given, only tracing for that command is disabled, and <literal>nil</literal> is returned; otherwise, all tracing is disabled, and an <literal>Array</literal> of the disabled commands is returned.</para>

  <para><methodsynopsis><type>nil</type><methodname>Kernel.warn</methodname><methodparam><parameter>message</parameter></methodparam></methodsynopsis> Writes the given message to the standard error stream, unless <literal>$VERBOSE</literal> is <literal>nil</literal>.</para>

  <!-- Instance methods -->

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#!~</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the receiver does not match, as per <function>#=~</function>, <parameter>object</parameter>; otherwise, <literal>false</literal>.</para>

  <para><methodsynopsis><type>0 or nil</type><methodname>Kernel#&lt;=&gt;</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>0</literal> if the receiver equals, as per <function>#==</function>, <parameter>object</parameter>; otherwise, <literal>nil</literal>.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#===</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Aliases <function>BasicObject#==</function>. Usually overridden to test for case equality.</para>

  <para><methodsynopsis><type>nil</type><methodname>Kernel#=~</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>nil</literal>. Usually overridden to match the receiver against a <literal>Regexp</literal>.</para>

  <para><methodsynopsis><type>Class</type><methodname>Kernel#class</methodname><void/></methodsynopsis> Returns the <literal>Class</literal> of the receiver.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#clone</methodname><void/></methodsynopsis> Returns a shallow copy of the receiver: its instance variables are copied by reference rather than value, and its tainted and frozen state is preserved.</para>

  <para><methodsynopsis><type>Proc</type><methodname>Kernel#define_singleton_method</methodname><methodparam><parameter>name</parameter></methodparam><methodparam><parameter>body</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>Proc</type><methodname>Kernel#define_singleton_method</methodname><methodparam><parameter>name</parameter></methodparam><methodparam><parameter>{ }</parameter></methodparam></methodsynopsis> Defines on the receiver a singleton method named with the <literal>Symbol</literal> <parameter>name</parameter>. The method body may be given as a <literal>Proc</literal>, <literal>Method</literal>, <literal>UnboundMethod</literal>, or literal block. In the last case, the block is evaluated via <function>BasicObject#instance_eval</function>.</para>

  <para><methodsynopsis><type>nil</type><methodname>Kernel#display</methodname><methodparam choice="opt"><parameter>stream=$&gt;</parameter></methodparam></methodsynopsis> Uses <function>IO#write</function> to write the receiver to the <literal>IO</literal> <parameter>stream</parameter>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#dup</methodname><void/></methodsynopsis> Returns a shallow copy of the receiver: its instance variables are copied by reference rather than value, and its tainted state is preserved.</para>

  <para><methodsynopsis><type>Enumerator</type><methodname>Kernel#enum_for</methodname><methodparam choice="opt"><parameter>name=:each</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Returns an <literal>Enumerator</literal> that will traverse the receiver using its method named <parameter>name</parameter>. Any <parameter>argument</parameter>s are passed directly to this method. Aliased by <function>Kernel#to_enum</function>.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#eql?</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Aliases <function>BasicObject#==</function>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#extend</methodname><methodparam rep="repeat"><parameter>module</parameter></methodparam></methodsynopsis> Mixes-in each given <literal>Module</literal> to the receiver’s singleton class, returning the receiver.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#freeze</methodname><void/></methodsynopsis> Freezes then returns the receiver.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#frozen?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the receiver is frozen; otherwise, <literal>false</literal>.</para>

  <para><methodsynopsis><type>Fixnum</type><methodname>Kernel#hash</methodname><void/></methodsynopsis> Returns the unique hash value for the receiver.</para>

  <para><methodsynopsis><type>Fixnum</type><methodname>Kernel#__id__</methodname><void/></methodsynopsis> Aliases <function>BasicObject#object_id</function>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#initialize_clone</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Callback invoked by both <function>Kernel#clone</function>, expected to copy additional state from the receiver to the new object, <parameter>object</parameter>. By default, invokes <function>Kernel#initialize_copy</function>, passing in <parameter>object</parameter>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#initialize_dup</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Callback invoked by both <function>Kernel#dup</function>, expected to copy additional state from the receiver to the new object, <parameter>object</parameter>. By default, invokes <function>Kernel#initialize_copy</function>, passing in <parameter>object</parameter>.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel#inspect</methodname><void/></methodsynopsis> Returns a human-readable representation of the receiver that is suitable for debugging purposes.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#instance_of?</methodname><methodparam><parameter>class</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the receiver is an instance of the given <literal>Class</literal> object; otherwise, <literal>false</literal>.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#instance_variable_defined?</methodname><methodparam><parameter>name</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the receiver defines an instance variable named <parameter>name</parameter>; otherwise, <literal>false</literal>. <parameter>name</parameter> is a <literal>Symbol</literal> of the form <literal>:@<replaceable>identifier</replaceable>.</literal>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#instance_variable_get</methodname><methodparam><parameter>name</parameter></methodparam></methodsynopsis> Returns the value of the receiver’s instance variable named <parameter>name</parameter>, raising a <exceptionname>NameError</exceptionname> if it is undefined. <parameter>name</parameter> is a <literal>Symbol</literal> of the form <literal>:@<replaceable>identifier</replaceable>.</literal>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#instance_variable_set</methodname><methodparam><parameter>name</parameter></methodparam><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Assigns <parameter>object</parameter> to the receiver’s instance variable named <parameter>name</parameter>, returning <parameter>object</parameter>. <parameter>name</parameter> is a <literal>Symbol</literal> of the form <literal>:@<replaceable>identifier</replaceable>.</literal>.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel#instance_variables</methodname><void/></methodsynopsis> Returns the names of instance variables defined in the receiver as an <literal>Array</literal> of <literal>Symbol</literal>s.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#is_a?</methodname><methodparam><parameter>class</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the given <literal>Class</literal> or <literal>Module</literal> is an ancestor of the receiver’s class; otherwise, <literal>false</literal>. Aliased by <function>Kernel#kind_of?</function>.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#kind_of?</methodname><methodparam><parameter>class</parameter></methodparam></methodsynopsis> Aliases <function>Kernel#is_a?</function>.</para>

  <para><methodsynopsis><type>Method</type><methodname>Kernel#method</methodname><methodparam><parameter>name</parameter></methodparam></methodsynopsis> Returns an objectification of the receiver’s method named <parameter>name</parameter>, where <parameter>name</parameter> is a <literal>Symbol</literal>. Raises a <exceptionname>NameError</exceptionname> if the named method does not exist.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel#methods</methodname><methodparam choice="opt"><parameter>all_public=true</parameter></methodparam></methodsynopsis> Returns the names of both public and protected methods to which the receiver responds, as an <literal>Array</literal> of <literal>Symbol</literal>s. If <parameter>all_public</parameter> is <literal>false</literal>, equivalent to <function>Kernel#singleton_methods</function>.</para>

  <para><methodsynopsis><type>false</type><methodname>Kernel#nil?</methodname><void/></methodsynopsis> Returns <literal>false</literal>; overridden by <function>NilClass#nil?</function>.</para>

  <para><methodsynopsis><type>Fixnum</type><methodname>Kernel#object_id</methodname><void/></methodsynopsis> Aliases <function>BasicObject#__id__</function>.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel#private_methods</methodname><void/></methodsynopsis> Returns the names of the private methods to which the receiver responds, as an <literal>Array</literal> of <literal>Symbol</literal>s.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel#protected_methods</methodname><void/></methodsynopsis> Returns the names of the protected methods to which the receiver responds, as an <literal>Array</literal> of <literal>Symbol</literal>s.</para>

  <para><methodsynopsis><type>Method</type><methodname>Kernel#public_method</methodname><methodparam><parameter>name</parameter></methodparam></methodsynopsis> Returns an objectification of the receiver’s public method named <parameter>name</parameter>, where <parameter>name</parameter> is a <literal>Symbol</literal>. Raises a <exceptionname>NameError</exceptionname> if the named method does not exist or isn’t public.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel#public_methods</methodname><methodparam choice="opt"><parameter>inherited=true</parameter></methodparam></methodsynopsis> Returns the names of the public methods to which the receiver responds, as an <literal>Array</literal> of <literal>Symbol</literal>s. If <parameter>inherited</parameter> is <literal>false</literal>, inherited methods are omitted.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#public_send</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Invokes the receiver’s public method named <parameter>name</parameter> with the given <parameter>argument</parameter>s, returning the method’s value.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#respond_to?</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt"><parameter>private=false</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the receiver responds to a public or protected method named <parameter>name</parameter>; <literal>false</literal>, otherwise. If <parameter>private</parameter> is <literal>true</literal>, considers private methods, too.</para>

  <para><methodsynopsis><type>false</type><methodname>Kernel#respond_to_missing?</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt"><parameter>private=false</parameter></methodparam></methodsynopsis> Hook called by <function>Kernel#respond_to?</function> when the receiver doesn’t define a method named <parameter>name</parameter>. If an object responds to a message via <function>BasicObject#method_missing</function> it is supposed to override this method to return <literal>true</literal> when given the selector.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#send</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam><methodparam choice="opt"><parameter>&amp;block</parameter></methodparam></methodsynopsis> Aliases <function>BasicObject#__send__</function>.</para>

  <para><methodsynopsis><type>Class</type><methodname>Kernel#singleton_class</methodname><void/></methodsynopsis> Returns the receiver’s singleton class, creating it if necessary.</para>

  <para><methodsynopsis><type>Array</type><methodname>Kernel#singleton_methods</methodname><methodparam choice="opt"><parameter>from_modules=true</parameter></methodparam></methodsynopsis> Returns the names of the receiver’s singleton methods, as an <literal>Array</literal> of <literal>Symbol</literal>s. If <parameter>from_modules</parameter> is <literal>false</literal>, the list excludes methods defined in <literal>Module</literal>s mixed-in to the receiver’s singleton class.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#taint</methodname><void/></methodsynopsis> Taints and returns the receiver.</para>

  <para><methodsynopsis><type>true or false</type><methodname>Kernel#tainted?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the receiver is tainted; otherwise, <literal>false</literal>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#tap</methodname><methodparam><parameter>{|object| }</parameter></methodparam></methodsynopsis> Yields the receiver to the block then returns the receiver.</para>

  <para><methodsynopsis><type>Enumerator</type><methodname>Kernel#to_enum</methodname><methodparam choice="opt"><parameter>name=:each</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>argument</parameter></methodparam></methodsynopsis> Aliases <function>Kernel#enum_for</function>.</para>

  <para><methodsynopsis><type>String</type><methodname>Kernel#to_s</methodname><void/></methodsynopsis> Returns a <literal>String</literal> containing the receiver’s class and object ID. For the top-level object, returns <literal>"main"</literal>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#trust</methodname><void/></methodsynopsis> Trusts and returns the receiver.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#untaint</methodname><void/></methodsynopsis> Un-taints and returns the receiver.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#untrust</methodname><void/></methodsynopsis> Un-trusts and returns the receiver.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#untrusted?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the receiver is not trusted; otherwise, <literal>false</literal>.</para>

  <!-- Private instance methods -->

  <para><methodsynopsis><type>true or false</type><methodname>Kernel.gem</methodname><methodparam><parameter>name</parameter></methodparam><methodparam choice="opt" rep="repeat"><parameter>version</parameter></methodparam></methodsynopsis> Adds the directories holding the gem named <parameter>name</parameter> to <literal>$LOAD_PATH</literal>. By default, the latest version of the gem is added; other versions can be specified by supplying one or more <parameter>version</parameter> predicates, all of which must be satisfied. A predicate has the form <literal><replaceable>operator</replaceable> <replaceable>number</replaceable></literal>. <replaceable>operator</replaceable> is one of <literal>=</literal> (this version only), <literal>!=</literal> (any version but this), <literal>&gt;</literal> (a higher version than this), <literal>&lt;</literal> (a lower version than this), <literal>&gt;=</literal> (at least this version), <literal>&lt;=</literal> (at most this version), and <literal>~&gt;</literal> (at least this version, but less than this version after incrementing its penultimate digit by <literal>1</literal>). <replaceable>number</replaceable> is up to three integers separated by periods which correspond to the major version, the minor version, and the patch level, respectively; omitted parts default to <literal>0</literal>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#initialize_copy</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Callback invoked by both <function>Kernel#initialize_clone</function> and <function>Kernel#initialize_dup</function>, expected to copy additional state from the receiver to the new object, <parameter>object</parameter>.</para>

  <para><methodsynopsis><type>Object</type><methodname>Kernel#remove_instance_variable</methodname><methodparam><parameter>name</parameter></methodparam></methodsynopsis> Removes the receiver’s instance variable named <parameter>name</parameter>, returning its old value. <parameter>name</parameter> is a <literal>Symbol</literal> of the form <literal>:@<replaceable>identifier</replaceable></literal>.</para>
</appendix>

<?xml version="1.0" encoding="utf-8"?>
<appendix version="5.0"
         xml:id="ref.string" xml:lang="en" xmlns="http://docbook.org/ns/docbook"
	 xmlns:xi="http://www.w3.org/2001/XInclude"
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  
  <title>String</title>

  <para><methodsynopsis><type>String</type><methodname>String.new</methodname><methodparam choice="opt"><parameter>object</parameter></methodparam></methodsynopsis> Initialises and returns a new <literal>String</literal>. If <parameter>object</parameter> is given, uses <function>String#replace</function> to substitute <parameter>object</parameter> for the receiver.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String.try_convert</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Attempts to convert <parameter>object</parameter> to a <literal>String</literal>—if it isn’t one already, uses <function>#to_str</function>—which it returns. Returns <literal>nil</literal> if the conversion failed.</para>

  <para><methodsynopsis><type>String</type><methodname>String#%</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Formats the receiver as with <function>Kernel.sprintf</function>, using <parameter>object</parameter> as the value(s) to interpolate. If <parameter>object</parameter> is an <literal>Array</literal>, its values are interpolated, instead.</para>

  <para><methodsynopsis><type>String</type><methodname>String#*</methodname><methodparam><parameter>n</parameter></methodparam></methodsynopsis> Returns a new <literal>String</literal> comprising <parameter>n</parameter> copies of the receiver, where <parameter>n</parameter> is a <literal>Numeric</literal> truncated to an <literal>Integer</literal>.</para>

  <para><methodsynopsis><type>String</type><methodname>String#+</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Returns a new <literal>String</literal> comprising the receiver concatenated with the given <literal>String</literal>.</para>

  <para><methodsynopsis><type>String</type><methodname>String#&lt;&lt;</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Concatenates the receiver with <parameter>object</parameter> in-place, returning the new receiver. If <parameter>object</parameter> is a <literal>Fixnum</literal> it is interpreted as a codepoint in the receiver’s encoding, and converted accordingly. Aliased by <function>String#concat</function>.</para>

  <para><methodsynopsis><type>-1, 0, 1, or nil</type><methodname>String#&lt;=&gt;</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>-1</literal> if the receiver is less than, <literal>0</literal> if it is equal to, and <literal>1</literal> if it is greater than <parameter>object</parameter>. If <parameter>object</parameter> responds to both <function>#to_str</function> and <function>&lt;=&gt;</function>, the <function>#&lt;=&gt;</function> method of <parameter>object</parameter> is used to compare it with the receiver, then the negation of the result is returned; otherwise, <literal>nil</literal> is returned.</para>

  <para><methodsynopsis><type>true or false</type><methodname>String#==</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if <parameter>object</parameter> is a <literal>String</literal> with the same <literal>Encoding</literal>, length, and content as the receiver. If <parameter>object</parameter> responds to <function>#to_str</function>, returns the result of calling <parameter>object</parameter>’s <function>#==</function> with the receiver as the argument. In all other cases, returns <literal>false</literal>.</para>

  <para><methodsynopsis><type>Integer or nil</type><methodname>String#=~</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns the result of calling <parameter>object</parameter>’s <function>#=~</function> method with the receiver as the argument. If <parameter>object</parameter> is a <literal>Regexp</literal>, <function>#=~</function> is not actually called, for performance reasons, but the semantics are identical. If <parameter>object</parameter> is a <literal>String</literal>, raises a <exceptionname>TypeError</exceptionname>.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String#[]</methodname><methodparam><parameter>offset</parameter></methodparam><methodparam choice="opt"><parameter>length</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>String or nil</type><methodname>String#[]</methodname><methodparam><parameter>range</parameter></methodparam></methodsynopsis> 
  <methodsynopsis><type>String or nil</type><methodname>String#[]</methodname><methodparam><parameter>regexp</parameter></methodparam><methodparam choice="opt"><parameter>group</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or nil</type><methodname>String#[]</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> The first form returns the portion of the receiver which begins at the given <literal>Fixnum</literal> <parameter>offset</parameter> and extends to either the last character or, if a <literal>Fixnum</literal> <parameter>length</parameter> is given, the character <parameter>length</parameter> characters after <parameter>offset</parameter>. The second form selects the characters from the receiver whose offsets are covered by the given <literal>Range</literal>, returning them as a <literal>String</literal>. In both cases, negative offsets count from the end of the receiver. The third form matches the receiver against the given <literal>Regexp</literal>, returning either the text that matched or, if <parameter>group</parameter> identifies a capturing group by either a <literal>Symbol</literal> name or <literal>Fixnum</literal> number, the text captured by that group. In the last form, the given <literal>String</literal> is returned if it occurs in the receiver. In all cases, <literal>nil</literal> is returned if there was no matching sub-<literal>String</literal>. Aliased by <function>String#slice</function>.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String#[]=</methodname><methodparam><parameter>offset</parameter></methodparam><methodparam choice="opt"><parameter>length</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>String or nil</type><methodname>String#[]=</methodname><methodparam><parameter>range</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis> 
  <methodsynopsis><type>String or nil</type><methodname>String#[]=</methodname><methodparam><parameter>regexp</parameter></methodparam><methodparam choice="opt"><parameter>group</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or nil</type><methodname>String#[]=</methodname><methodparam><parameter>string</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis> Replaces a sub-<literal>String</literal> of the receiver with the given <parameter>replacement</parameter> <literal>String</literal>, which it then returns. The first form replaces the portion of the receiver which begins at the given <literal>Fixnum</literal> <parameter>offset</parameter> and extends to either the last character or, if a <literal>Fixnum</literal> <parameter>length</parameter> is given, the character <parameter>length</parameter> characters after <parameter>offset</parameter>. If this sub-<literal>String</literal> doesn’t exist, an <exceptionname>IndexError</exceptionname> is raised. The second form replaces the characters from the receiver whose offsets are covered by the given <literal>Range</literal>, raising a <exceptionname>RangeError</exceptionname> if there is no such sub-<literal>String</literal>. In both cases, negative offsets count from the end of the receiver. The third form matches the receiver against the given <literal>Regexp</literal>, replacing either the text that matched or, if <parameter>group</parameter> identifies a capturing group by either a <literal>Symbol</literal> name or <literal>Fixnum</literal> number, the text captured by that group. If the <literal>Regexp</literal> didn’t match, an <exceptionname>IndexError</exceptionname> is raised. In the last form, replaces the first occurrence of the <literal>String</literal> <parameter>string</parameter> in the receiver, raising an <exceptionname>IndexError</exceptionname> if it never occurs.</para>

    <para><methodsynopsis><type>true or false</type><methodname>String#ascii_only?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the receiver has an ASCII-compatible encoding and contains no ASCII characters; otherwise, <literal>false</literal>.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#bytes</methodname><methodparam choice="opt"><parameter>{|byte| }</parameter></methodparam></methodsynopsis> Yields each byte in the receiver as a <literal>Fixnum</literal>, returning the receiver. If the block is omitted, returns an <literal>Enumerator</literal>. Aliased by <function>String#each_byte</function>.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#bytesize</methodname><void/></methodsynopsis> Returns the number of bytes contained within the receiver.</para>

    <para><methodsynopsis><type>String</type><methodname>String#capitalize</methodname><void/></methodsynopsis> Returns a copy of the receiver with the first character converted to uppercase, and the remainder to lowercase. However, this only affects ASCII-characters; others remain as they are.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#capitalize!</methodname><void/></methodsynopsis> Behaves as <function>String#capitalize</function> except the receiver is converted in-place. Returns the receiver, or <literal>nil</literal> if it wasn’t modified.</para>

  <para><methodsynopsis><type>-1, 0, 1, or nil</type><methodname>String#casecmp</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>-1</literal> if the receiver is less than, <literal>0</literal> if it is equal to, and <literal>1</literal> if it is greater than <parameter>object</parameter>. Differences in case of ASCII characters are ignored. Returns <literal>nil</literal> if the encoding of the receiver is incompatible with that of <parameter>object</parameter>. Raises a <exceptionname>TypeError</exceptionname> if <parameter>object</parameter> can’t be converted to a <literal>String</literal>.</para>

  <para><methodsynopsis><type>String</type><methodname>String#center</methodname><methodparam><parameter>length</parameter></methodparam><methodparam><parameter>padding=" "</parameter></methodparam></methodsynopsis> Returns a new <literal>String</literal> of length <parameter>length</parameter> with the receiver in the middle, surrounded either side with <parameter>padding</parameter>. If <parameter>length</parameter> is less than or equal the length of the receiver, returns the receiver.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#chars</methodname><methodparam choice="opt"><parameter>{|character| }</parameter></methodparam></methodsynopsis> Yields each character of the receiver as a <literal>String</literal>, returning the receiver. If the block is omitted, returns an <literal>Enumerator</literal>. Aliased by <function>String#each_char</function>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#chr</methodname><void/></methodsynopsis> Returns the first character of the receiver, or if the receiver is empty, an empty <literal>String</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#clear</methodname><void/></methodsynopsis> Deletes the contents of the receiver, returning the new receiver.</para>

    <para><methodsynopsis><type>String</type><methodname>String#chomp</methodname><methodparam><parameter>remove=$/</parameter></methodparam></methodsynopsis> Returns a copy of the receiver with the given <literal>String</literal> <parameter>remove</parameter> deleted from the end. If <parameter>remove</parameter> has the value <literal>"\n"</literal>, removes the longest of the following, instead: <literal>"\n"</literal>, <literal>"\r"</literal>, and <literal>"\r\n"</literal>.</para> 

    <para><methodsynopsis><type>String or nil</type><methodname>String#chomp!</methodname><methodparam><parameter>remove=$/</parameter></methodparam></methodsynopsis> Behaves as <function>String#chomp</function>, but modifies the receiver in-place. Returns the receiver, or <literal>nil</literal> if it wasn’t modified.</para>

    <para><methodsynopsis><type>String</type><methodname>String#chop</methodname><void/></methodsynopsis> Returns the receiver with the last character removed. If it ends with <literal>"\r\n"</literal>, both characters are removed. If the receiver is empty, it is returned.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#chop!</methodname><void/></methodsynopsis> Behaves as <function>String#chop</function>, but returns <literal>nil</literal> if the receiver was empty.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#codepoints</methodname><methodparam choice="opt"><parameter>{|codepoints| }</parameter></methodparam></methodsynopsis> Yields each codepoint of the receiver as a <literal>Fixnum</literal>, returning the receiver. If the block is omitted, returns an <literal>Enumerator</literal>. Aliased by <function>String#each_codepoint</function>.</para>

  <para><methodsynopsis><type>String</type><methodname>String#concat</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Aliases <function>String#&lt;&lt;</function>.</para>

  <para><methodsynopsis><type>Fixnum</type><methodname>String#count</methodname><methodparam rep="repeat"><parameter>string</parameter></methodparam></methodsynopsis> Returns the number of characters contained in the receiver which are specified as arguments. Each argument specifies a set of characters as a <literal>String</literal>: if their first character is a circumflex accent (<literal>"^</literal>), their contents are negated; if they comprise two characters separated by a hyphen minus sign (<literal>"-"</literal>), they represent the range of characters between the two given. Counts the characters contained in the intersection of these sets.</para>

  <para><methodsynopsis><type>String</type><methodname>String#crypt</methodname><methodparam><parameter>salt</parameter></methodparam></methodsynopsis> Returns a one-way cryptographic hash of the receiver using <function>crypt(3)</function>. The <parameter>salt</parameter> should be at least two characters long and only contain ASCII letters, numbers, <literal>"."</literal> and <literal>/</literal>. Please do not, under any circumstances, use this method to perform cryptography; the algorithm used by <function>crypt(3)</function> is a variation of <acronym>DES</acronym> which is known to be insecure.</para> 

  <para><methodsynopsis><type>String</type><methodname>String#delete</methodname><methodparam rep="repeat"><parameter>string</parameter></methodparam></methodsynopsis> Returns a copy of the receiver with the characters specified as arguments removed. Each argument specifies a set of characters as a <literal>String</literal>: if their first character is a circumflex accent (<literal>"^</literal>), their contents are negated; if they comprise two characters separated by a hyphen minus sign (<literal>"-"</literal>), they represent the range of characters between the two given. Deletes the characters appearing in the intersection of these sets.</para>

  <para><methodsynopsis><type>String</type><methodname>String#downcase</methodname><void/></methodsynopsis> Returns a copy of the receiver with its uppercase ASCII characters converted to lowercase.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String#downcase!</methodname><void/></methodsynopsis> Behaves as <function>String#downcase</function>, but modifies the receiver in-place, then returns it. Returns <literal>nil</literal> if no modifications were made.</para>

  <para><methodsynopsis><type>String</type><methodname>String#dump</methodname><void/></methodsynopsis> Returns a copy of the receiver with non-printable ASCII characters and non-ASCII characters replaced by character escapes. The <literal>String</literal> returned will evaluate to the receiver.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#each_byte</methodname><methodparam choice="opt"><parameter>{|byte| }</parameter></methodparam></methodsynopsis> Aliases <function>String#bytes</function>.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#each_char</methodname><methodparam choice="opt"><parameter>{|character| }</parameter></methodparam></methodsynopsis> Aliases <function>String#chars</function>.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#each_codepoint</methodname><methodparam choice="opt"><parameter>{|codepoints| }</parameter></methodparam></methodsynopsis> Aliases <function>String#codepoints</function>.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#each_line</methodname><methodparam choice="opt"><parameter>{|line| }</parameter></methodparam></methodsynopsis> Aliases <function>String#lines</function>.</para>

    <para><methodsynopsis><type>true or false</type><methodname>String#empty?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the receiver has a size of <literal>0</literal>; otherwise, <literal>false</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#encode</methodname><methodparam choice="opt"><parameter>options</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String</type><methodname>String#encode</methodname><methodparam><parameter>target_encoding</parameter></methodparam><methodparam choice="opt"><parameter>source_encoding</parameter></methodparam><methodparam choice="opt"><parameter>options</parameter></methodparam></methodsynopsis> Transcodes the receiver from one encoding to another, returning the result. The first form transcodes from the receiver’s current encoding to the default internal encoding. The second form transcodes from <parameter>source_encoding</parameter>, or the receiver’s current encoding if that argument is omitted, to <parameter>destination_encoding</parameter>. The first form replaces invalid byte sequences and undefined characters with <literal>"?"</literal>; the others raise <exceptionname>Encoding::InvalidByteSequence</exceptionname> and <exceptionname>Encoding::UndefinedConversionError</exceptionname>, respectively. <parameter>options</parameter> is an <link linkend="enc.options-hash"><literal>Encoding</literal> options <literal>Hash</literal></link>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#encode!</methodname><methodparam choice="opt"><parameter>options</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String</type><methodname>String#encode!</methodname><methodparam><parameter>target_encoding</parameter></methodparam><methodparam choice="opt"><parameter>source_encoding</parameter></methodparam><methodparam choice="opt"><parameter>options</parameter></methodparam></methodsynopsis> Behaves as <function>String#encode</function>, but modifies the receiver in-place before returning it.</para>

    <para><methodsynopsis><type>Encoding</type><methodname>String#encoding</methodname><void/></methodsynopsis> Returns the receiver’s encoding.</para>

    <para><methodsynopsis><type>true or false</type><methodname>String#end_with?</methodname><methodparam rep="repeat"><parameter>suffix</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the receiver ends with any of the given <literal>String</literal>s; otherwise, <literal>false</literal>.</para>

    <para><methodsynopsis><type>true or false</type><methodname>String#eql?</methodname><methodparam><parameter>object</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if <parameter>object</parameter> is a <literal>String</literal> with the same length and content as the receiver; otherwise, <literal>false</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#force_encoding</methodname><methodparam><parameter>encoding</parameter></methodparam></methodsynopsis> Associates the receiver with the given encoding, then returns the receiver. <parameter>encoding</parameter> may be either an <literal>Encoding</literal> object or an <literal>Encoding</literal> name as a <literal>String</literal>.</para>

    <para><methodsynopsis><type>Integer or nil</type><methodname>String#getbyte</methodname><methodparam><parameter>offset</parameter></methodparam></methodsynopsis> Returns the byte at the given offset in the receiver, or <literal>nil</literal> if there is no such byte. If <parameter>offset</parameter> is negative it counts from the end of the receiver.</para> 

    <para><methodsynopsis><type>String</type><methodname>String#gsub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or Enumerator</type><methodname>String#gsub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam choice="opt"><parameter>{|matchdata| }</parameter></methodparam></methodsynopsis> Replaces all occurrences of <parameter>pattern</parameter> with <parameter>replacement</parameter> or the value of the block. <parameter>pattern</parameter> is either a <literal>Regexp</literal> or a <literal>String</literal>; in the latter case, metacharacters are ignored. If <parameter>replacement</parameter> is a <literal>String</literal> it may contain references to capture groups as either <literal>\<replaceable>digit</replaceable></literal> or <literal>\k&lt;<replaceable>name</replaceable>&gt;</literal>; otherwise, it is a <literal>Hash</literal> whose keys are <literal>String</literal>s containing the text captured by a group, and values the <literal>String</literal>s that they should be replaced with. In the second form, the block is invoked on each match with the corresponding <literal>MatchData</literal> object as a parameter. Returns the result or, if both <parameter>replacement</parameter> and block are omitted, an <literal>Enumerator</literal>. <remark>TODO: Tabulate syntax of substitution String (in Strings chapter?).</remark></para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#gsub!</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String, nil, or Enumerator</type><methodname>String#gsub!</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam choice="opt"><parameter>{|matchdata| }</parameter></methodparam></methodsynopsis> Behaves as <function>String#gsub</function> except the receiver is modified in-place. Returns the receiver if it was changed; otherwise, <literal>nil</literal>.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#hex</methodname><void/></methodsynopsis> Interprets the leading characters of the receiver as a hexadecimal integer, with an optional sign and <literal>0x</literal> prefix, returning the <literal>Integer</literal> equivalent. Returns <literal>0</literal> if no such number was found.</para>

    <para><methodsynopsis><type>true or false</type><methodname>String#include?</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the given <literal>String</literal> is contained by the receiver; otherwise, <literal>false</literal>.</para>

    <para><methodsynopsis><type>Integer or nil</type><methodname>String#index</methodname><methodparam><parameter>needle</parameter></methodparam><methodparam choice="opt"><parameter>offset</parameter></methodparam></methodsynopsis> Searches the receiver for the given sub-<literal>String</literal> or <literal>Regexp</literal>, returning the character offset where the first occurrence begins, or <literal>nil</literal> if the search failed. If <parameter>offset</parameter> is given it is the <literal>Fixnum</literal> character offset in the receiver from which the search begins.</para>

    <para><methodsynopsis><type>String</type><methodname>String#insert</methodname><methodparam><parameter>index</parameter></methodparam><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Inserts the <literal>String</literal> <parameter>string</parameter> into the receiver before the character at the <literal>Fixnum</literal> <parameter>offset</parameter>. A negative <parameter>offset</parameter> counts from the end of the receiver, inserting <parameter>string</parameter> after this character.</para>

    <para><methodsynopsis><type>Symbol</type><methodname>String#intern</methodname><void/></methodsynopsis> Returns the receiver converted to a <literal>Symbol</literal>.</para>

    <para><methodsynopsis><type>Fixnum</type><methodname>String#length</methodname><void/></methodsynopsis> Returns the number of characters contained in the receiver. Aliased by <function>String#size</function>.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#lines</methodname><methodparam choice="opt"><parameter>separator=$/</parameter></methodparam><methodparam choice="opt"><parameter>{|line| }</parameter></methodparam></methodsynopsis> Yields each line of the receiver that is separated by <parameter>separator</parameter>, returning an <literal>Enumerator</literal> if the block is omitted. A <parameter>separator</parameter> of <literal>""</literal> is equivalent to one of <literal>"\n\n"</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#ljust</methodname><methodparam><parameter>width</parameter></methodparam><methodparam choice="opt"><parameter>padding= " "</parameter></methodparam></methodsynopsis> Returns a copy of the receiver <parameter>width</parameter> characters long, left-justified using <parameter>padding</parameter> if necessary.</para>

    <para><methodsynopsis><type>String</type><methodname>String#lstrip</methodname><void/></methodsynopsis> Returns a copy of the receiver with leading ASCII-whitespace characters removed.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#lstrip!</methodname><void/></methodsynopsis> Behaves as <function>String#lstrip</function> but modifies the receiver in-place. Returns the new receiver, or <literal>nil</literal> if it was’t changed.</para>

    <para><methodsynopsis><type>MatchData or nil</type><methodname>String#match</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam choice="opt"><parameter>{|matchdata| }</parameter></methodparam></methodsynopsis> Matches the receiver against <parameter>pattern</parameter>. If successful, returns the corresponding <literal>MatchData</literal> object or, if the block is given, yields it to the block then returns the block’s value; otherwise, returns <literal>nil</literal>. <parameter>pattern</parameter> may be a <literal>String</literal>, in which case its compiled into a <literal>Regexp</literal>, a <literal>Regexp</literal>, or an object which can be converted to one of the aforementioned types.</para>

    <para><methodsynopsis><type>String</type><methodname>String#next</methodname><void/></methodsynopsis> Returns the <literal>String</literal> which succeeds the receiver. Starting with the last alphanumeric character, or the last character if there are no alphanumerics, increments it as follows: a digit produces the successive digit, a letter produces the successive letter, preserving case, and any other character produces the character with the successive codepoint. If the character incremented was the last of its type, e.g. <literal>"z"</literal> or <literal>"9"</literal>, the character to its left is incremented, <emphasis>ad infinitum</emphasis>; if there is no character to the left, the new character is appended to the receiver. However, if the receiver matches <literal>/(?&lt;a&gt;\d+)(?&lt;b&gt;)[^\d](?&lt;c&gt;\d+)$/</literal>, whereas the last character of <replaceable>b</replaceable> would normally be incremented, the last character of <replaceable>a</replaceable> is, instead—i.e. the two sequences of digits are treated like a number containing a decimal point. Aliased by <function>String#succ</function>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#next!</methodname><void/></methodsynopsis> Behaves as <function>String#next</function>, but modifies the receiver in-place before returning it. Aliased by <function>String#succ!</function>.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#oct</methodname><void/></methodsynopsis> Interprets the leading characters of the receiver as octal digits prefixed by an optional sign, and returns the <literal>Integer</literal> corresponding to their value.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#ord</methodname><void/></methodsynopsis> Returns the codepoint of the first character in the receiver.</para>

    <para><methodsynopsis><type>Array</type><methodname>String#partition</methodname><methodparam><parameter>pattern</parameter></methodparam></methodsynopsis> Searches the receiver for the first occurrence of <parameter>pattern</parameter>. If successful, returns an <literal>Array</literal> whose first element is the portion of the receiver before the match, second element is the portion of the receiver which matched, and last element is the portion of the receiver after the match. Otherwise, returns an <literal>Array</literal> with the receiver as first element, and two empty <literal>String</literal>s as the last two. <parameter>pattern</parameter> may be either a <literal>String</literal> or <literal>Regexp</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#replace</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Changes the receiver’s contents, encoding, and taintedness to the respective values of the given <literal>String</literal>. Returns the new receiver.</para>

    <para><methodsynopsis><type>String</type><methodname>String#reverse</methodname><void/></methodsynopsis> Returns a copy of the receiver with the characters reversed.</para>

    <para><methodsynopsis><type>String</type><methodname>String#reverse!</methodname><void/></methodsynopsis> Behaves as <function>String#reverse</function> but modifies the receiver in-place.</para>

    <para><methodsynopsis><type>Integer or nil</type><methodname>String#rindex</methodname><methodparam><parameter>needle</parameter></methodparam><methodparam choice="opt"><parameter>offset</parameter></methodparam></methodsynopsis> Searches the receiver for the given sub-<literal>String</literal> or <literal>Regexp</literal>, returning the character offset where the last occurrence begins, or <literal>nil</literal> if the search failed. If <parameter>offset</parameter> is given it is the <literal>Fixnum</literal> character offset in the receiver at which the search ends.</para>

    <para><methodsynopsis><type>String</type><methodname>String#rjust</methodname><methodparam><parameter>width</parameter></methodparam><methodparam choice="opt"><parameter>padding= " "</parameter></methodparam></methodsynopsis> Returns a copy of the receiver <parameter>width</parameter> characters long, right-justified using <parameter>padding</parameter> if necessary.</para>

    <para><methodsynopsis><type>Array</type><methodname>String#rpartition</methodname><methodparam><parameter>pattern</parameter></methodparam></methodsynopsis> Searches the receiver for the last occurrence of <parameter>pattern</parameter>. If successful, returns an <literal>Array</literal> whose first element is the portion of the receiver before the match, second element is the portion of the receiver which matched, and last element is the portion of the receiver after the match. Otherwise, returns an <literal>Array</literal> whose first two elements are empty <literal>String</literal>s, and last element is the receiver. <parameter>pattern</parameter> may be either a <literal>String</literal> or <literal>Regexp</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#rstrip</methodname><void/></methodsynopsis> Returns a copy of the receiver with trailing ASCII-whitespace characters removed.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#rstrip!</methodname><void/></methodsynopsis> Behaves as <function>String#rstrip</function> but modifies the receiver in-place. Returns the new receiver, or <literal>nil</literal> if it was’t changed.</para>

    <para><methodsynopsis><type>Array or String</type><methodname>String#scan</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam choice="opt"><parameter>{|match| }</parameter></methodparam></methodsynopsis> Searches the receiver for <parameter>pattern</parameter> yielding the sub-<literal>String</literal> matched or, if the <parameter>pattern</parameter> contains capturing groups, the text matched by each group as an <literal>Array</literal> of <literal>String</literal>s. If the block is omitted, the values that would have been yielded are returned as an <literal>Array</literal>. <parameter>pattern</parameter> may be a <literal>Regexp</literal> or a <literal>String</literal>; in the latter case, metacharacters that it contains are ignored.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#setbyte</methodname><methodparam><parameter>n</parameter></methodparam><methodparam><parameter>byte</parameter></methodparam></methodsynopsis> Replaces the <parameter>n</parameter><superscript>th</superscript> byte of the receiver with the <literal>Fixnum</literal> <parameter>byte</parameter>, returning <parameter>byte</parameter>. A negative <parameter>n</parameter> counts from the end of the receiver, and if <parameter>n</parameter> falls outside the receiver an <exceptionname>IndexError</exceptionname> is raised.</para>

    <para><methodsynopsis><type>Fixnum</type><methodname>String#size</methodname><void/></methodsynopsis> Aliases <function>String#length</function>.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String#slice</methodname><methodparam><parameter>offset</parameter></methodparam><methodparam choice="opt"><parameter>length</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>String or nil</type><methodname>String#slice</methodname><methodparam><parameter>range</parameter></methodparam></methodsynopsis> 
  <methodsynopsis><type>String or nil</type><methodname>String#slice</methodname><methodparam><parameter>regexp</parameter></methodparam><methodparam choice="opt"><parameter>group</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or nil</type><methodname>String#slice</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Aliases <function>String#[]</function>.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String#slice!</methodname><methodparam><parameter>offset</parameter></methodparam><methodparam choice="opt"><parameter>length</parameter></methodparam></methodsynopsis>
  <methodsynopsis><type>String or nil</type><methodname>String#slice!</methodname><methodparam><parameter>range</parameter></methodparam></methodsynopsis> 
  <methodsynopsis><type>String or nil</type><methodname>String#slice!</methodname><methodparam><parameter>regexp</parameter></methodparam><methodparam choice="opt"><parameter>group</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or nil</type><methodname>String#slice!</methodname><methodparam><parameter>string</parameter></methodparam></methodsynopsis> Behaves as <function>String#[]</function>, but deletes and returns the matching portion of the receiver. If the receiver wasn’t modified, <literal>nil</literal> is returned.</para>

  <para><methodsynopsis><type>Array</type><methodname>String#split</methodname><methodparam><parameter>pattern=$;</parameter></methodparam><methodparam choice="opt"><parameter>limit</parameter></methodparam></methodsynopsis> Divides the receiver into an <literal>Array</literal> of <literal>String</literal> fields, each a run of consecutive characters up to, but excluding, <parameter>pattern</parameter>. A delimiter of <literal>nil</literal> or <literal>" "</literal>, splits on consecutive whitespace. Any other <literal>String</literal> <parameter>pattern</parameter> is interpreted literally. When <parameter>pattern</parameter> is a <literal>Regexp</literal>, the delimiter is the matching text, however text matched by a capturing group is included in the result as its own field. If <parameter>pattern</parameter> matches <literal>""</literal>, each character of the receiver is an field. Unless <parameter>limit</parameter> is negative, trailing empty fields are dropped. If <parameter>limit</parameter> is positive, it specifies the maximum number of elements in the result; if <literal>1</literal>, the receiver is the sole element in the result.</para>

  <para><methodsynopsis><type>String</type><methodname>String#squeeze</methodname><methodparam choice="opt" rep="repeat"><parameter>set</parameter></methodparam></methodsynopsis> Returns a copy of the receiver in which runs of the same character are replaced by one of that character. If arguments are given, only runs of the characters they specify are collapsed in this way. Each argument specifies a set of characters as a <literal>String</literal>: if their first character is a circumflex accent (<literal>"^</literal>), their contents are negated; if they comprise two characters separated by a hyphen minus sign (<literal>"-"</literal>), they represent the range of characters between the two given.</para>

  <para><methodsynopsis><type>String or nil</type><methodname>String#squeeze!</methodname><methodparam choice="opt" rep="repeat"><parameter>set</parameter></methodparam></methodsynopsis> Behaves as <function>String#squeeze</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>

  <para><methodsynopsis><type>true or false</type><methodname>String#start_with?</methodname><methodparam rep="repeat"><parameter>prefix</parameter></methodparam></methodsynopsis> Returns <literal>true</literal> if the receiver begins with any of the given <literal>String</literal>s; otherwise, <literal>false</literal>.</para>

  <para><methodsynopsis><type>String</type><methodname>String#strip</methodname><void/></methodsynopsis> Returns a copy of the receiver with leading whitespace, trailing whitespace, and trailing <literal>"\0"</literal> characters removed.</para>

 <para><methodsynopsis><type>String or nil</type><methodname>String#strip!</methodname><void/></methodsynopsis> Behaves as <function>String#strip</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>


    <para><methodsynopsis><type>String</type><methodname>String#sub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or Enumerator</type><methodname>String#sub</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam choice="opt"><parameter>{|matchdata| }</parameter></methodparam></methodsynopsis> Behaves as <function>String#gsub</function>, except only the first match is replaced.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#sub!</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam><parameter>replacement</parameter></methodparam></methodsynopsis>
    <methodsynopsis><type>String or Enumerator</type><methodname>String#sub!</methodname><methodparam><parameter>pattern</parameter></methodparam><methodparam choice="opt"><parameter>{|matchdata| }</parameter></methodparam></methodsynopsis> Behaves as <function>String#sub</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#succ</methodname><void/></methodsynopsis> Aliases <function>String#next</function>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#succ!</methodname><void/></methodsynopsis> Aliases <function>String#next!</function>.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#sum</methodname><methodparam choice="opt"><parameter>bits=16</parameter></methodparam></methodsynopsis> Calculates a checksum of the receiver by computing <literal><replaceable>byte</replaceable> % (2 ** <replaceable>bits</replaceable> - 1)</literal> for each byte of the receiver, then summing the result.</para>

    <para><methodsynopsis><type>String</type><methodname>String#swapcase</methodname><void/></methodsynopsis> Returns a copy of the receiver with uppercase ASCII characters converted to lowercase, and lowercase ASCII characters converted to uppercase.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#swapcase!</methodname><void/></methodsynopsis> Behaves as <function>String#swapcase</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>

    <para><methodsynopsis><type>Complex</type><methodname>String#to_c</methodname><void/></methodsynopsis> Assumes the leading characters of the receiver represent a complex number comprising a numeric literal then, optionally, a solidus followed by another numeric literal, an optional sign, then the letter <emphasis>i</emphasis>. Interprets the portion before the solidus as the real part of the complex number, and the portion between the solidus and <emphasis>i</emphasis> as the imaginary part. If the imaginary part is not specified, <literal>0</literal> is assumed. Returns a <literal>Complex</literal> number with the values extracted, or <literal>Complex(0, 0)</literal> on failure.</para>

    <para><methodsynopsis><type>Float</type><methodname>String#to_f</methodname><void/></methodsynopsis> Assumes the leading characters of the receiver represent a floating-point number comprising an integer literal then, optionally, a full stop followed by another integer literal. Interprets the first portion as the whole part of the <literal>Float</literal>, and the last portion as its fractional part. Assumes a fractional part of <literal>0</literal> if the latter portion is omitted. Returns a <literal>Float</literal> with the value extracted.</para>

    <para><methodsynopsis><type>Integer</type><methodname>String#to_i</methodname><methodparam choice="opt"><parameter>base=10</parameter></methodparam></methodsynopsis> Assumes the leading characters of the receiver constitute an integer in the given base, where <parameter>base</parameter> is between <literal>2</literal> and <literal>36</literal>. Ignores leading whitespace, but honours a leading sign. If <parameter>base</parameter> is <literal>0</literal>, infers the base by looking for a prefix: <literal>0b</literal> implies binary, <literal>0o</literal> and <literal>0</literal> imply octal, <literal>0d</literal> implies decimal, and <literal>0x</literal> implies hexadecimal. Returns this value, or <literal>0</literal> if no value could be found, as an <literal>Integer</literal>.</para>

    <para><methodsynopsis><type>Rational</type><methodname>String#to_r</methodname><void/></methodsynopsis> Assumes the leading characters of the receiver represent a rational number comprising a numeric literal then, optionally, a solidus followed by another numeric literal. These characters may be enclosed by parentheses. Interprets the first portion as the numerator, and the last portion as the denominator. If either part couldn’t be read they have the values <literal>0</literal> and <literal>1</literal>, respectively. Returns a new <literal>Rational</literal> with the value extracted.</para>

    <para><methodsynopsis><type>String</type><methodname>String#to_s</methodname><void/></methodsynopsis> Returns the receiver. Aliased by <function>String#to_str</function>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#to_str</methodname><void/></methodsynopsis> Aliases <function>String#to_s</function>.</para>

    <para><methodsynopsis><type>Symbol</type><methodname>String#to_sym</methodname><void/></methodsynopsis> Returns the receiver as a <literal>Symbol</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#tr</methodname><methodparam><parameter>from</parameter></methodparam><methodparam><parameter>to</parameter></methodparam></methodsynopsis> Returns a copy of the receiver with the characters in the <parameter>from</parameter> <literal>String</literal> translated to the corresponding characters in the <parameter>to</parameter> <literal>String</literal>. Either argument may specify ranges of characters by separating the beginning and end points with <literal>-</literal>. If <parameter>from</parameter> begins with <literal>^</literal> it represents the characters not listed. When <parameter>to</parameter> is shorter than <parameter>from</parameter>, its last character is repeated to redress the difference.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#tr!</methodname><methodparam><parameter>from</parameter></methodparam><methodparam><parameter>to</parameter></methodparam></methodsynopsis> Behaves as <function>String#tr</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#tr_s</methodname><methodparam><parameter>from</parameter></methodparam><methodparam><parameter>to</parameter></methodparam></methodsynopsis> Translates the receiver with <function>String#tr</function> then collapses runs of identical characters in the translated regions.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#tr_s!</methodname><methodparam><parameter>from</parameter></methodparam><methodparam><parameter>to</parameter></methodparam></methodsynopsis> Behaves as <function>String#tr_s</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>

    <para><methodsynopsis><type>Array</type><methodname>String#unpack</methodname><methodparam><parameter>format</parameter></methodparam></methodsynopsis> Separates the receiver into an <literal>Array</literal> of sub-<literal>String</literal>s according to the given template. For more details see <xref linkend="str.unpack"/>.</para>

    <para><methodsynopsis><type>String</type><methodname>String#upcase</methodname><void/></methodsynopsis> Returns a copy of the receiver with lowercase ASCII characters converted to uppercase.</para>

    <para><methodsynopsis><type>String or nil</type><methodname>String#upcase!</methodname><methodparam><parameter>from</parameter></methodparam><methodparam><parameter>to</parameter></methodparam></methodsynopsis> Behaves as <function>String#upcase</function>, but modifies the receiver in-place. Returns the receiver if actually modified; otherwise, <literal>nil</literal>.</para>

    <para><methodsynopsis><type>String or Enumerator</type><methodname>String#upto</methodname><methodparam><parameter>max</parameter></methodparam><methodparam choice="opt"><parameter>{|string| }</parameter></methodparam></methodsynopsis> Generates, using <function>String#succ</function>, each <literal>String</literal> from the receiver to the <literal>String</literal> <parameter>max</parameter>, inclusive, yielding each to the block. Returns an <literal>Enumerator</literal> if the block is omitted.</para>

    <para><methodsynopsis><type>true or false</type><methodname>String#valid_encoding?</methodname><void/></methodsynopsis> Returns <literal>true</literal> if the contents of the receiver is valid according to its encoding; otherwise, <literal>false</literal>.</para>
</appendix>
